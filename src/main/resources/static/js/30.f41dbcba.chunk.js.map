{"version":3,"sources":["components/HeaderBreadcrumbs.js","../node_modules/@iconify/icons-eva/cloud-upload-outline.js","utils/timeconverions.js","components/TaskNotFound.js","../node_modules/@mui/material/SnackbarContent/snackbarContentClasses.js","../node_modules/@mui/material/SnackbarContent/SnackbarContent.js","../node_modules/@mui/material/Snackbar/snackbarClasses.js","../node_modules/@mui/material/Snackbar/Snackbar.js","pages/timesheet/TimesheetEntryScreen.js"],"names":["HeaderBreadcrumbs","links","action","heading","moreLink","sx","other","mb","display","alignItems","flexGrow","variant","gutterBottom","flexShrink","mt","isString","href","target","map","noWrap","exports","__esModule","default","timeConvert","n","hours","Number","rhours","Math","floor","minutes","rminutes","round","timeConvert2Deci","TaskNotFound","align","getSnackbarContentUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","SnackbarContentRoot","styled","Paper","name","overridesResolver","props","styles","root","theme","emphasis","palette","mode","backgroundColor","emphasize","background","_extends","typography","body2","color","getContrastText","flexWrap","padding","borderRadius","shape","breakpoints","up","minWidth","SnackbarContentMessage","message","SnackbarContentAction","marginLeft","paddingLeft","marginRight","SnackbarContent","React","inProps","ref","useThemeProps","className","role","_objectWithoutPropertiesLoose","ownerState","classes","composeClasses","useUtilityClasses","_jsxs","square","elevation","clsx","children","_jsx","getSnackbarUtilityClass","_excluded2","SnackbarRoot","capitalize","anchorOrigin","vertical","horizontal","center","isRtl","left","right","transform","zIndex","snackbar","position","justifyContent","top","bottom","Snackbar","autoHideDuration","ClickAwayListenerProps","ContentProps","disableWindowBlurListener","onBlur","onClose","onFocus","onMouseEnter","onMouseLeave","open","resumeHideDuration","TransitionComponent","Grow","transitionDuration","enter","duration","enteringScreen","exit","leavingScreen","TransitionProps","onEnter","onExited","useTheme","direction","slots","timerAutoHide","exited","setExited","handleClose","useEventCallback","setAutoHideTimer","autoHideDurationParam","clearTimeout","current","setTimeout","handlePause","handleResume","window","addEventListener","removeEventListener","document","handleKeyDown","nativeEvent","defaultPrevented","key","ClickAwayListener","onClickAway","event","appear","in","timeout","node","isAppearing","TimesheetEntryScreen","themeStretch","useSettings","useSnackbar","enqueueSnackbar","closeSnackbar","title","useState","value","setValue","isNewRowEnabled","setNewRow","rowsPerPage","setRowsPerPage","isEditOpened","setDrawer","isTimeError","setTimeErrorOpen","page","setPage","userDetails","useSelector","getUserDetailsFromAuth","today","Date","previousWeek","getFullYear","getMonth","getDate","date_freeze","dispatch","useDispatch","getTimesheetDetails","taskdetails","status","managercomments","timesheetId","tsDetails","categoryLOV","getCategoryLOVFromTS","projectLOV","getProjectLOVFromTS","statuses","getStatusLOVFromTS","isLoading","getIsLoadingFromTS","error","getErrorFromTS","category","project","activity","phase","remarks","addRowDetails","setAddRowDetails","index","editRowDetails","setEditRowDetails","selectedProject","setSelectedProject","selectedCategory","setSelectedCategory","calPayroll","setCalPayroll","sumMins","length","o","reduce","a","c","emptyRows","max","handleDrawerClose","handleChangeNewRow","e","handleEditNewRow","handleAddNewRow","isFormValid","size","onClick","icon","closeFill","projectName","addRowsInTaskDetails","handleSubmit","validHrs","payload","requestHeader","SourceSystem","UUID","TimeStamp","requestData","date","toString","usercomments","taskDetails","calendar","newCreateTimeSheetEntryAsync","useEffect","getCategoryLOVAsync","getStatusLOVAsync","getProjectLOVAsync","val","localStorage","getItem","result","includes","JSON","parse","setTimeSheetEmptyValue","setErrorNull","Page","Container","maxWidth","PATH_DASHBOARD","general","Button","component","RouterLink","disabled","is_bulk_upload","to","timesheet","timeSheetBulkUpload","startIcon","cloudUploadFill","Card","CardContent","Stack","spacing","Alert","severity","AlertTitle","Box","m","xs","sm","md","DatePicker","label","inputFormat","disableFuture","fullWidth","minDate","onChange","newValue","_date","getTimeSheetEntryAsync","handleChange","format","onKeyDown","preventDefault","renderInput","params","TextField","Autocomplete","disablePortal","autoHighlight","id","_event","nameVal","setItem","stringify","options","isOptionEqualToValue","option","getOptionLabel","Tooltip","placement","LoadingButton","loading","endIcon","TableContainer","LinearProgress","Table","TableHead","TableRow","style","whiteSpace","TableCell","TableBody","colSpan","py","slice","row","hover","tabIndex","width","wordBreak","Chip","IconButton","projName","ctgyName","handleDraweropen","TableFooter","TablePagination","rowsPerPageOptions","count","onPageChange","newPage","onRowsPerPageChange","parseInt","Drawer","anchor","hideBackdrop","Typography","Grid","container","item","multiline","maxRows","inputProps","maxLength","FormControl","InputLabel","Select","labelId","_x","i","MenuItem","type","indexOfFirstData","data","obj","splice","push","editRowsInTaskDetails"],"mappings":"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","file":"static/js/30.f41dbcba.chunk.js","sourcesContent":["import { isString } from 'lodash';\nimport PropTypes from 'prop-types';\n// material\nimport { Box, Typography, Link } from '@mui/material';\n//\nimport { MBreadcrumbs } from './@material-extend';\n\n// ----------------------------------------------------------------------\n\nHeaderBreadcrumbs.propTypes = {\n  links: PropTypes.array,\n  action: PropTypes.node,\n  heading: PropTypes.string.isRequired,\n  moreLink: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  sx: PropTypes.object\n};\n\nexport default function HeaderBreadcrumbs({ links, action, heading, moreLink = '' || [], sx, ...other }) {\n  return (\n    <Box sx={{ mb: 5, ...sx }}>\n      <Box sx={{ display: 'flex', alignItems: 'center' }}>\n        <Box sx={{ flexGrow: 1 }}>\n          <Typography variant=\"h4\" gutterBottom>\n            {heading}\n          </Typography>\n          <MBreadcrumbs links={links} {...other} />\n        </Box>\n\n        {action && <Box sx={{ flexShrink: 0 }}>{action}</Box>}\n      </Box>\n\n      <Box sx={{ mt: 2 }}>\n        {isString(moreLink) ? (\n          <Link href={moreLink} target=\"_blank\" variant=\"body2\">\n            {moreLink}\n          </Link>\n        ) : (\n          moreLink.map((href) => (\n            <Link noWrap key={href} href={href} variant=\"body2\" target=\"_blank\" sx={{ display: 'table' }}>\n              {href}\n            </Link>\n          ))\n        )}\n      </Box>\n    </Box>\n  );\n}\n","var data = {\n\t\"body\": \"<g fill=\\\"currentColor\\\"><path d=\\\"M12.71 11.29a1 1 0 0 0-1.4 0l-3 2.9a1 1 0 1 0 1.38 1.44L11 14.36V20a1 1 0 0 0 2 0v-5.59l1.29 1.3a1 1 0 0 0 1.42 0a1 1 0 0 0 0-1.42z\\\"/><path d=\\\"M17.67 7A6 6 0 0 0 6.33 7a5 5 0 0 0-3.08 8.27A1 1 0 1 0 4.75 14A3 3 0 0 1 7 9h.1a1 1 0 0 0 1-.8a4 4 0 0 1 7.84 0a1 1 0 0 0 1 .8H17a3 3 0 0 1 2.25 5a1 1 0 0 0 .09 1.42a1 1 0 0 0 .66.25a1 1 0 0 0 .75-.34A5 5 0 0 0 17.67 7z\\\"/></g>\",\n\t\"width\": 24,\n\t\"height\": 24\n};\nexports.__esModule = true;\nexports.default = data;\n","export const timeConvert = (n) => {\r\n  const num = Number(n);\r\n  const hours = num / 60;\r\n  const rhours = Math.floor(hours);\r\n  const minutes = (hours - rhours) * 60;\r\n  const rminutes = Math.round(minutes);\r\n  return `${rhours} hour(s) and ${rminutes} minute(s).`;\r\n};\r\n\r\nexport const timeConvert2Deci = (n) => {\r\n  const num = Number(n);\r\n  const hours = num / 60;\r\n  const rhours = Math.floor(hours);\r\n  const minutes = (hours - rhours) * 60;\r\n  const rminutes = Math.round(minutes);\r\n  return `${rhours}.${rminutes}`;\r\n};\r\n","import PropTypes from 'prop-types';\n// material\nimport { Paper, Typography } from '@mui/material';\n\n// ----------------------------------------------------------------------\n\nTaskNotFound.propTypes = {\n  searchQuery: PropTypes.string\n};\n\nexport default function TaskNotFound({ ...other }) {\n  return (\n    <Paper {...other}>\n      <Typography gutterBottom align=\"center\" variant=\"subtitle1\">\n        No task created yet!\n      </Typography>\n      <Typography variant=\"body2\" align=\"center\">\n        Select a date and create a task and then save it.\n      </Typography>\n    </Paper>\n  );\n}\n","import { generateUtilityClass, generateUtilityClasses } from '@mui/base';\nexport function getSnackbarContentUtilityClass(slot) {\n  return generateUtilityClass('MuiSnackbarContent', slot);\n}\nconst snackbarContentClasses = generateUtilityClasses('MuiSnackbarContent', ['root', 'message', 'action']);\nexport default snackbarContentClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"action\", \"className\", \"message\", \"role\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { emphasize } from '@mui/system';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport Paper from '../Paper';\nimport { getSnackbarContentUtilityClass } from './snackbarContentClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root'],\n    action: ['action'],\n    message: ['message']\n  };\n  return composeClasses(slots, getSnackbarContentUtilityClass, classes);\n};\n\nconst SnackbarContentRoot = styled(Paper, {\n  name: 'MuiSnackbarContent',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(({\n  theme\n}) => {\n  const emphasis = theme.palette.mode === 'light' ? 0.8 : 0.98;\n  const backgroundColor = emphasize(theme.palette.background.default, emphasis);\n  return _extends({}, theme.typography.body2, {\n    color: theme.palette.getContrastText(backgroundColor),\n    backgroundColor,\n    display: 'flex',\n    alignItems: 'center',\n    flexWrap: 'wrap',\n    padding: '6px 16px',\n    borderRadius: theme.shape.borderRadius,\n    flexGrow: 1,\n    [theme.breakpoints.up('sm')]: {\n      flexGrow: 'initial',\n      minWidth: 288\n    }\n  });\n});\nconst SnackbarContentMessage = styled('div', {\n  name: 'MuiSnackbarContent',\n  slot: 'Message',\n  overridesResolver: (props, styles) => styles.message\n})({\n  padding: '8px 0'\n});\nconst SnackbarContentAction = styled('div', {\n  name: 'MuiSnackbarContent',\n  slot: 'Action',\n  overridesResolver: (props, styles) => styles.action\n})({\n  display: 'flex',\n  alignItems: 'center',\n  marginLeft: 'auto',\n  paddingLeft: 16,\n  marginRight: -8\n});\nconst SnackbarContent = /*#__PURE__*/React.forwardRef(function SnackbarContent(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiSnackbarContent'\n  });\n\n  const {\n    action,\n    className,\n    message,\n    role = 'alert'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const ownerState = props;\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsxs(SnackbarContentRoot, _extends({\n    role: role,\n    square: true,\n    elevation: 6,\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other, {\n    children: [/*#__PURE__*/_jsx(SnackbarContentMessage, {\n      className: classes.message,\n      ownerState: ownerState,\n      children: message\n    }), action ? /*#__PURE__*/_jsx(SnackbarContentAction, {\n      className: classes.action,\n      ownerState: ownerState,\n      children: action\n    }) : null]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? SnackbarContent.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The action to display. It renders after the message, at the end of the snackbar.\n   */\n  action: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The message to display.\n   */\n  message: PropTypes.node,\n\n  /**\n   * The ARIA role attribute of the element.\n   * @default 'alert'\n   */\n  role: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .string,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default SnackbarContent;","import { generateUtilityClass, generateUtilityClasses } from '@mui/base';\nexport function getSnackbarUtilityClass(slot) {\n  return generateUtilityClass('MuiSnackbar', slot);\n}\nconst snackbarClasses = generateUtilityClasses('MuiSnackbar', ['root', 'anchorOriginTopCenter', 'anchorOriginBottomCenter', 'anchorOriginTopRight', 'anchorOriginBottomRight', 'anchorOriginTopLeft', 'anchorOriginBottomLeft']);\nexport default snackbarClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"onEnter\", \"onExited\"],\n      _excluded2 = [\"action\", \"anchorOrigin\", \"autoHideDuration\", \"children\", \"className\", \"ClickAwayListenerProps\", \"ContentProps\", \"disableWindowBlurListener\", \"message\", \"onBlur\", \"onClose\", \"onFocus\", \"onMouseEnter\", \"onMouseLeave\", \"open\", \"resumeHideDuration\", \"TransitionComponent\", \"transitionDuration\", \"TransitionProps\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport ClickAwayListener from '@mui/base/ClickAwayListener';\nimport styled from '../styles/styled';\nimport useTheme from '../styles/useTheme';\nimport useThemeProps from '../styles/useThemeProps';\nimport { duration } from '../styles/createTransitions';\nimport useEventCallback from '../utils/useEventCallback';\nimport capitalize from '../utils/capitalize';\nimport Grow from '../Grow';\nimport SnackbarContent from '../SnackbarContent';\nimport { getSnackbarUtilityClass } from './snackbarClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    anchorOrigin\n  } = ownerState;\n  const slots = {\n    root: ['root', `anchorOrigin${capitalize(anchorOrigin.vertical)}${capitalize(anchorOrigin.horizontal)}`]\n  };\n  return composeClasses(slots, getSnackbarUtilityClass, classes);\n};\n\nconst SnackbarRoot = styled('div', {\n  name: 'MuiSnackbar',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, styles[`anchorOrigin${capitalize(ownerState.anchorOrigin.vertical)}${capitalize(ownerState.anchorOrigin.horizontal)}`]];\n  }\n})(({\n  theme,\n  ownerState\n}) => {\n  const center = _extends({}, !ownerState.isRtl && {\n    left: '50%',\n    right: 'auto',\n    transform: 'translateX(-50%)'\n  }, ownerState.isRtl && {\n    right: '50%',\n    left: 'auto',\n    transform: 'translateX(50%)'\n  });\n\n  return _extends({\n    zIndex: theme.zIndex.snackbar,\n    position: 'fixed',\n    display: 'flex',\n    left: 8,\n    right: 8,\n    justifyContent: 'center',\n    alignItems: 'center'\n  }, ownerState.anchorOrigin.vertical === 'top' ? {\n    top: 8\n  } : {\n    bottom: 8\n  }, ownerState.anchorOrigin.horizontal === 'left' && {\n    justifyContent: 'flex-start'\n  }, ownerState.anchorOrigin.horizontal === 'right' && {\n    justifyContent: 'flex-end'\n  }, {\n    [theme.breakpoints.up('sm')]: _extends({}, ownerState.anchorOrigin.vertical === 'top' ? {\n      top: 24\n    } : {\n      bottom: 24\n    }, ownerState.anchorOrigin.horizontal === 'center' && center, ownerState.anchorOrigin.horizontal === 'left' && _extends({}, !ownerState.isRtl && {\n      left: 24,\n      right: 'auto'\n    }, ownerState.isRtl && {\n      right: 24,\n      left: 'auto'\n    }), ownerState.anchorOrigin.horizontal === 'right' && _extends({}, !ownerState.isRtl && {\n      right: 24,\n      left: 'auto'\n    }, ownerState.isRtl && {\n      left: 24,\n      right: 'auto'\n    }))\n  });\n});\nconst Snackbar = /*#__PURE__*/React.forwardRef(function Snackbar(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiSnackbar'\n  });\n\n  const {\n    action,\n    anchorOrigin: {\n      vertical,\n      horizontal\n    } = {\n      vertical: 'bottom',\n      horizontal: 'left'\n    },\n    autoHideDuration = null,\n    children,\n    className,\n    ClickAwayListenerProps,\n    ContentProps,\n    disableWindowBlurListener = false,\n    message,\n    onBlur,\n    onClose,\n    onFocus,\n    onMouseEnter,\n    onMouseLeave,\n    open,\n    resumeHideDuration,\n    TransitionComponent = Grow,\n    transitionDuration = {\n      enter: duration.enteringScreen,\n      exit: duration.leavingScreen\n    },\n    TransitionProps: {\n      onEnter,\n      onExited\n    } = {}\n  } = props,\n        TransitionProps = _objectWithoutPropertiesLoose(props.TransitionProps, _excluded),\n        other = _objectWithoutPropertiesLoose(props, _excluded2);\n\n  const theme = useTheme();\n  const isRtl = theme.direction === 'rtl';\n\n  const ownerState = _extends({}, props, {\n    anchorOrigin: {\n      vertical,\n      horizontal\n    },\n    isRtl\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  const timerAutoHide = React.useRef();\n  const [exited, setExited] = React.useState(true);\n  const handleClose = useEventCallback((...args) => {\n    if (onClose) {\n      onClose(...args);\n    }\n  });\n  const setAutoHideTimer = useEventCallback(autoHideDurationParam => {\n    if (!onClose || autoHideDurationParam == null) {\n      return;\n    }\n\n    clearTimeout(timerAutoHide.current);\n    timerAutoHide.current = setTimeout(() => {\n      handleClose(null, 'timeout');\n    }, autoHideDurationParam);\n  });\n  React.useEffect(() => {\n    if (open) {\n      setAutoHideTimer(autoHideDuration);\n    }\n\n    return () => {\n      clearTimeout(timerAutoHide.current);\n    };\n  }, [open, autoHideDuration, setAutoHideTimer]); // Pause the timer when the user is interacting with the Snackbar\n  // or when the user hide the window.\n\n  const handlePause = () => {\n    clearTimeout(timerAutoHide.current);\n  }; // Restart the timer when the user is no longer interacting with the Snackbar\n  // or when the window is shown back.\n\n\n  const handleResume = React.useCallback(() => {\n    if (autoHideDuration != null) {\n      setAutoHideTimer(resumeHideDuration != null ? resumeHideDuration : autoHideDuration * 0.5);\n    }\n  }, [autoHideDuration, resumeHideDuration, setAutoHideTimer]);\n\n  const handleFocus = event => {\n    if (onFocus) {\n      onFocus(event);\n    }\n\n    handlePause();\n  };\n\n  const handleMouseEnter = event => {\n    if (onMouseEnter) {\n      onMouseEnter(event);\n    }\n\n    handlePause();\n  };\n\n  const handleBlur = event => {\n    if (onBlur) {\n      onBlur(event);\n    }\n\n    handleResume();\n  };\n\n  const handleMouseLeave = event => {\n    if (onMouseLeave) {\n      onMouseLeave(event);\n    }\n\n    handleResume();\n  };\n\n  const handleClickAway = event => {\n    if (onClose) {\n      onClose(event, 'clickaway');\n    }\n  };\n\n  const handleExited = node => {\n    setExited(true);\n\n    if (onExited) {\n      onExited(node);\n    }\n  };\n\n  const handleEnter = (node, isAppearing) => {\n    setExited(false);\n\n    if (onEnter) {\n      onEnter(node, isAppearing);\n    }\n  };\n\n  React.useEffect(() => {\n    // TODO: window global should be refactored here\n    if (!disableWindowBlurListener && open) {\n      window.addEventListener('focus', handleResume);\n      window.addEventListener('blur', handlePause);\n      return () => {\n        window.removeEventListener('focus', handleResume);\n        window.removeEventListener('blur', handlePause);\n      };\n    }\n\n    return undefined;\n  }, [disableWindowBlurListener, handleResume, open]);\n  React.useEffect(() => {\n    if (!open) {\n      return undefined;\n    }\n    /**\n     * @param {KeyboardEvent} nativeEvent\n     */\n\n\n    function handleKeyDown(nativeEvent) {\n      if (!nativeEvent.defaultPrevented) {\n        // IE11, Edge (prior to using Bink?) use 'Esc'\n        if (nativeEvent.key === 'Escape' || nativeEvent.key === 'Esc') {\n          // not calling `preventDefault` since we don't know if people may ignore this event e.g. a permanently open snackbar\n          if (onClose) {\n            onClose(nativeEvent, 'escapeKeyDown');\n          }\n        }\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [exited, open, onClose]); // So we only render active snackbars.\n\n  if (!open && exited) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsx(ClickAwayListener, _extends({\n    onClickAway: handleClickAway\n  }, ClickAwayListenerProps, {\n    children: /*#__PURE__*/_jsx(SnackbarRoot, _extends({\n      className: clsx(classes.root, className),\n      onBlur: handleBlur,\n      onFocus: handleFocus,\n      onMouseEnter: handleMouseEnter,\n      onMouseLeave: handleMouseLeave,\n      ownerState: ownerState,\n      ref: ref\n    }, other, {\n      children: /*#__PURE__*/_jsx(TransitionComponent, _extends({\n        appear: true,\n        in: open,\n        timeout: transitionDuration,\n        direction: vertical === 'top' ? 'down' : 'up',\n        onEnter: handleEnter,\n        onExited: handleExited\n      }, TransitionProps, {\n        children: children || /*#__PURE__*/_jsx(SnackbarContent, _extends({\n          message: message,\n          action: action\n        }, ContentProps))\n      }))\n    }))\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Snackbar.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The action to display. It renders after the message, at the end of the snackbar.\n   */\n  action: PropTypes.node,\n\n  /**\n   * The anchor of the `Snackbar`.\n   * On smaller screens, the component grows to occupy all the available width,\n   * the horizontal alignment is ignored.\n   * @default { vertical: 'bottom', horizontal: 'left' }\n   */\n  anchorOrigin: PropTypes.shape({\n    horizontal: PropTypes.oneOf(['center', 'left', 'right']).isRequired,\n    vertical: PropTypes.oneOf(['bottom', 'top']).isRequired\n  }),\n\n  /**\n   * The number of milliseconds to wait before automatically calling the\n   * `onClose` function. `onClose` should then set the state of the `open`\n   * prop to hide the Snackbar. This behavior is disabled by default with\n   * the `null` value.\n   * @default null\n   */\n  autoHideDuration: PropTypes.number,\n\n  /**\n   * Replace the `SnackbarContent` component.\n   */\n  children: PropTypes.element,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Props applied to the `ClickAwayListener` element.\n   */\n  ClickAwayListenerProps: PropTypes.object,\n\n  /**\n   * Props applied to the [`SnackbarContent`](/api/snackbar-content/) element.\n   */\n  ContentProps: PropTypes.object,\n\n  /**\n   * If `true`, the `autoHideDuration` timer will expire even if the window is not focused.\n   * @default false\n   */\n  disableWindowBlurListener: PropTypes.bool,\n\n  /**\n   * When displaying multiple consecutive Snackbars from a parent rendering a single\n   * <Snackbar/>, add the key prop to ensure independent treatment of each message.\n   * e.g. <Snackbar key={message} />, otherwise, the message may update-in-place and\n   * features such as autoHideDuration may be canceled.\n   */\n  key: () => null,\n\n  /**\n   * The message to display.\n   */\n  message: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be closed.\n   * Typically `onClose` is used to set state in the parent component,\n   * which is used to control the `Snackbar` `open` prop.\n   * The `reason` parameter can optionally be used to control the response to `onClose`,\n   * for example ignoring `clickaway`.\n   *\n   * @param {React.SyntheticEvent<any> | Event} event The event source of the callback.\n   * @param {string} reason Can be: `\"timeout\"` (`autoHideDuration` expired), `\"clickaway\"`, or `\"escapeKeyDown\"`.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onMouseEnter: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onMouseLeave: PropTypes.func,\n\n  /**\n   * If `true`, the component is shown.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * The number of milliseconds to wait before dismissing after user interaction.\n   * If `autoHideDuration` prop isn't specified, it does nothing.\n   * If `autoHideDuration` prop is specified but `resumeHideDuration` isn't,\n   * we default to `autoHideDuration / 2` ms.\n   */\n  resumeHideDuration: PropTypes.number,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * The component used for the transition.\n   * [Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.\n   * @default Grow\n   */\n  TransitionComponent: PropTypes.elementType,\n\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   * @default {\n   *   enter: duration.enteringScreen,\n   *   exit: duration.leavingScreen,\n   * }\n   */\n  transitionDuration: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n    appear: PropTypes.number,\n    enter: PropTypes.number,\n    exit: PropTypes.number\n  })]),\n\n  /**\n   * Props applied to the transition element.\n   * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.\n   * @default {}\n   */\n  TransitionProps: PropTypes.object\n} : void 0;\nexport default Snackbar;","import React from 'react';\r\nimport {\r\n  Container,\r\n  Autocomplete,\r\n  Card,\r\n  CardContent,\r\n  TableContainer,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  Paper,\r\n  Button,\r\n  Drawer,\r\n  Tooltip,\r\n  IconButton,\r\n  Alert,\r\n  Box,\r\n  Stack,\r\n  TextField,\r\n  TableBody,\r\n  FormControl,\r\n  Select,\r\n  MenuItem,\r\n  InputLabel,\r\n  TableFooter,\r\n  TablePagination,\r\n  Chip,\r\n  Grid,\r\n  AlertTitle,\r\n  Typography,\r\n  Snackbar,\r\n  LinearProgress\r\n} from '@mui/material';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport SaveIcon from '@mui/icons-material/Save';\r\nimport ClearIcon from '@mui/icons-material/Clear';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport cloudUploadFill from '@iconify/icons-eva/cloud-upload-outline';\r\n// import FastForwardIcon from '@mui/icons-material/FastForward';\r\nimport { format } from 'date-fns';\r\nimport { useSnackbar } from 'notistack';\r\nimport closeFill from '@iconify/icons-eva/close-fill';\r\nimport { DatePicker, LoadingButton } from '@mui/lab';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Icon } from '@iconify/react';\r\nimport { PATH_DASHBOARD } from '../../routes/paths';\r\nimport HeaderBreadcrumbs from '../../components/HeaderBreadcrumbs';\r\nimport useSettings from '../../hooks/useSettings';\r\nimport Page from '../../components/Page';\r\nimport { timeConvert2Deci, timeConvert } from '../../utils/timeconverions';\r\nimport {\r\n  getTimesheetDetails,\r\n  getTimeSheetEntryAsync,\r\n  getCategoryLOVFromTS,\r\n  getProjectLOVFromTS,\r\n  getStatusLOVFromTS,\r\n  getIsLoadingFromTS,\r\n  addRowsInTaskDetails,\r\n  editRowsInTaskDetails,\r\n  newCreateTimeSheetEntryAsync,\r\n  getCategoryLOVAsync,\r\n  getStatusLOVAsync,\r\n  getProjectLOVAsync,\r\n  getErrorFromTS,\r\n  setTimeSheetEmptyValue,\r\n  setErrorNull\r\n} from '../../redux/slices/timesheetSlice';\r\nimport { getUserDetailsFromAuth } from '../../redux/slices/authSlice';\r\nimport TaskNotFound from '../../components/TaskNotFound';\r\nimport { MIconButton } from '../../components/@material-extend';\r\n\r\nexport default function TimesheetEntryScreen() {\r\n  const { themeStretch } = useSettings();\r\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\r\n  const title = 'Timesheet Entry';\r\n  const [value, setValue] = React.useState(null);\r\n  const [isNewRowEnabled, setNewRow] = React.useState(false);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n  const [isEditOpened, setDrawer] = React.useState(false);\r\n  const [isTimeError, setTimeErrorOpen] = React.useState(false);\r\n  const [page, setPage] = React.useState(0);\r\n  const userDetails = useSelector(getUserDetailsFromAuth);\r\n  const today = new Date();\r\n  const previousWeek = new Date(\r\n    today.getFullYear(),\r\n    today.getMonth(),\r\n    today.getDate() - (userDetails ? userDetails.date_freeze : 7)\r\n  );\r\n  const dispatch = useDispatch();\r\n  const { taskdetails, status, managercomments, timesheetId } = useSelector(getTimesheetDetails);\r\n  const tsDetails = useSelector(getTimesheetDetails);\r\n  const categoryLOV = useSelector(getCategoryLOVFromTS);\r\n  const projectLOV = useSelector(getProjectLOVFromTS);\r\n  const statuses = useSelector(getStatusLOVFromTS);\r\n  const isLoading = useSelector(getIsLoadingFromTS);\r\n  const error = useSelector(getErrorFromTS);\r\n  const drawerWidth = 350;\r\n  const [addRowDetails, setAddRowDetails] = React.useState({\r\n    category: '',\r\n    project: '',\r\n    activity: '',\r\n    status: '',\r\n    phase: '',\r\n    minutes: '',\r\n    remarks: ''\r\n  });\r\n  const [editRowDetails, setEditRowDetails] = React.useState({\r\n    index: null,\r\n    category: '',\r\n    project: '',\r\n    activity: '',\r\n    status: '',\r\n    phase: '',\r\n    minutes: '',\r\n    remarks: ''\r\n  });\r\n  const [selectedProject, setSelectedProject] = React.useState('');\r\n  const [selectedCategory, setSelectedCategory] = React.useState('');\r\n  const [calPayroll, setCalPayroll] = React.useState('');\r\n  const sumMins =\r\n    taskdetails.length === 0 ? 0 : taskdetails.map((o) => o.minutes).reduce((a, c) => Number(a) + Number(c));\r\n\r\n  const emptyRows = page > 0 ? Math.max(0, (1 + page) * rowsPerPage - taskdetails.length) : 0;\r\n\r\n  const handleChange = (_date) => {\r\n    if (_date) {\r\n      const payload = {\r\n        requestHeader: {\r\n          SourceSystem: '',\r\n          UUID: '',\r\n          TimeStamp: ''\r\n        },\r\n        requestData: {\r\n          date: _date\r\n        }\r\n      };\r\n\r\n      dispatch(getTimeSheetEntryAsync(payload));\r\n      setValue(_date);\r\n\r\n      // const val = localStorage.getItem('calPayroll');\r\n      // if (val) {\r\n      //   setCalPayroll(JSON.parse(val));\r\n      // } else {\r\n      //   setCalPayroll('');\r\n      // }\r\n    }\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const handleDraweropen = (row, index) => {\r\n    setNewRow(false);\r\n    setEditRowDetails({\r\n      index,\r\n      category: row.category,\r\n      project: row.project,\r\n      activity: row.activity,\r\n      status: row.status,\r\n      phase: row.phase,\r\n      minutes: row.minutes,\r\n      remarks: row.remarks\r\n    });\r\n    const projName = {\r\n      projectName: row.project\r\n    };\r\n    setSelectedProject(projName);\r\n\r\n    const ctgyName = {\r\n      value: row.category\r\n    };\r\n    setSelectedCategory(ctgyName);\r\n\r\n    setDrawer(true);\r\n  };\r\n\r\n  const handleDrawerClose = () => {\r\n    setDrawer(false);\r\n  };\r\n\r\n  const handleChangeNewRow = (e) => {\r\n    setAddRowDetails({ ...addRowDetails, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const handleEditNewRow = (e) => {\r\n    setEditRowDetails({ ...editRowDetails, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const handleAddNewRow = async () => {\r\n    let isFormValid = true;\r\n\r\n    if (!selectedCategory) {\r\n      isFormValid = false;\r\n      enqueueSnackbar('Category is required', {\r\n        variant: 'error',\r\n        action: (key) => (\r\n          <MIconButton size=\"small\" onClick={() => closeSnackbar(key)}>\r\n            <Icon icon={closeFill} />\r\n          </MIconButton>\r\n        )\r\n      });\r\n    }\r\n    if (selectedCategory) {\r\n      addRowDetails.category = selectedCategory.value;\r\n    }\r\n    if (!selectedProject) {\r\n      isFormValid = false;\r\n      enqueueSnackbar('Project is required', {\r\n        variant: 'error',\r\n        action: (key) => (\r\n          <MIconButton size=\"small\" onClick={() => closeSnackbar(key)}>\r\n            <Icon icon={closeFill} />\r\n          </MIconButton>\r\n        )\r\n      });\r\n    }\r\n    if (selectedProject) {\r\n      addRowDetails.project = selectedProject.projectName;\r\n    }\r\n    if (!addRowDetails.activity) {\r\n      isFormValid = false;\r\n      enqueueSnackbar('Activity is required', {\r\n        variant: 'error',\r\n        action: (key) => (\r\n          <MIconButton size=\"small\" onClick={() => closeSnackbar(key)}>\r\n            <Icon icon={closeFill} />\r\n          </MIconButton>\r\n        )\r\n      });\r\n    }\r\n    if (!addRowDetails.minutes) {\r\n      isFormValid = false;\r\n      enqueueSnackbar('Minutes is required', {\r\n        variant: 'error',\r\n        action: (key) => (\r\n          <MIconButton size=\"small\" onClick={() => closeSnackbar(key)}>\r\n            <Icon icon={closeFill} />\r\n          </MIconButton>\r\n        )\r\n      });\r\n    }\r\n    if (!addRowDetails.status) {\r\n      isFormValid = false;\r\n      enqueueSnackbar('Status is required', {\r\n        variant: 'error',\r\n        action: (key) => (\r\n          <MIconButton size=\"small\" onClick={() => closeSnackbar(key)}>\r\n            <Icon icon={closeFill} />\r\n          </MIconButton>\r\n        )\r\n      });\r\n    }\r\n\r\n    if (isFormValid) {\r\n      enqueueSnackbar('Added Successfully! But not saved yet', {\r\n        variant: 'success',\r\n        action: (key) => (\r\n          <MIconButton size=\"small\" onClick={() => closeSnackbar(key)}>\r\n            <Icon icon={closeFill} />\r\n          </MIconButton>\r\n        )\r\n      });\r\n      setAddRowDetails({\r\n        category: '',\r\n        project: '',\r\n        activity: '',\r\n        status: '',\r\n        phase: '',\r\n        minutes: '',\r\n        remarks: ''\r\n      });\r\n      setSelectedProject('');\r\n      setSelectedCategory('');\r\n      dispatch(addRowsInTaskDetails(addRowDetails));\r\n\r\n      // await handleSubmit('save');\r\n    }\r\n  };\r\n\r\n  const handleEditRow = () => {\r\n    let isFormValid = true;\r\n\r\n    if (!selectedCategory) {\r\n      isFormValid = false;\r\n      enqueueSnackbar('Category is required', {\r\n        variant: 'error',\r\n        action: (key) => (\r\n          <MIconButton size=\"small\" onClick={() => closeSnackbar(key)}>\r\n            <Icon icon={closeFill} />\r\n          </MIconButton>\r\n        )\r\n      });\r\n    }\r\n    if (selectedCategory) {\r\n      editRowDetails.category = selectedCategory.value;\r\n    }\r\n    if (!selectedProject) {\r\n      isFormValid = false;\r\n      enqueueSnackbar('Project is required', {\r\n        variant: 'error',\r\n        action: (key) => (\r\n          <MIconButton size=\"small\" onClick={() => closeSnackbar(key)}>\r\n            <Icon icon={closeFill} />\r\n          </MIconButton>\r\n        )\r\n      });\r\n    }\r\n\r\n    if (selectedProject) {\r\n      editRowDetails.project = selectedProject.projectName;\r\n    }\r\n\r\n    if (!editRowDetails.activity) {\r\n      isFormValid = false;\r\n      enqueueSnackbar('Activity is required', {\r\n        variant: 'error',\r\n        action: (key) => (\r\n          <MIconButton size=\"small\" onClick={() => closeSnackbar(key)}>\r\n            <Icon icon={closeFill} />\r\n          </MIconButton>\r\n        )\r\n      });\r\n    }\r\n    if (!editRowDetails.minutes) {\r\n      isFormValid = false;\r\n      enqueueSnackbar('Minutes is required', {\r\n        variant: 'error',\r\n        action: (key) => (\r\n          <MIconButton size=\"small\" onClick={() => closeSnackbar(key)}>\r\n            <Icon icon={closeFill} />\r\n          </MIconButton>\r\n        )\r\n      });\r\n    }\r\n    if (!editRowDetails.status) {\r\n      isFormValid = false;\r\n      enqueueSnackbar('Status is required', {\r\n        variant: 'error',\r\n        action: (key) => (\r\n          <MIconButton size=\"small\" onClick={() => closeSnackbar(key)}>\r\n            <Icon icon={closeFill} />\r\n          </MIconButton>\r\n        )\r\n      });\r\n    }\r\n\r\n    if (isFormValid) {\r\n      enqueueSnackbar('Updated Successfully! But dont forget to save', {\r\n        variant: 'success',\r\n        action: (key) => (\r\n          <MIconButton size=\"small\" onClick={() => closeSnackbar(key)}>\r\n            <Icon icon={closeFill} />\r\n          </MIconButton>\r\n        )\r\n      });\r\n\r\n      const indexOfLastData = (page + 1) * rowsPerPage;\r\n      const indexOfFirstData = indexOfLastData - rowsPerPage;\r\n      const data = [...taskdetails];\r\n      const obj = {\r\n        ...data[indexOfFirstData + editRowDetails.index],\r\n        ...editRowDetails\r\n      };\r\n\r\n      data.splice(indexOfFirstData + editRowDetails.index, 1);\r\n      data.push(obj);\r\n\r\n      dispatch(editRowsInTaskDetails(data));\r\n\r\n      handleDrawerClose(false);\r\n\r\n      setEditRowDetails({\r\n        category: '',\r\n        project: '',\r\n        activity: '',\r\n        status: '',\r\n        phase: '',\r\n        minutes: '',\r\n        remarks: ''\r\n      });\r\n      setSelectedProject('');\r\n      setSelectedCategory('');\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (action) => {\r\n    if (!calPayroll) {\r\n      enqueueSnackbar('Primary Project is required', {\r\n        variant: 'error',\r\n        action: (key) => (\r\n          <MIconButton size=\"small\" onClick={() => closeSnackbar(key)}>\r\n            <Icon icon={closeFill} />\r\n          </MIconButton>\r\n        )\r\n      });\r\n    } else {\r\n      if (action === 'submit') {\r\n        const validHrs = timeConvert2Deci(sumMins);\r\n\r\n        if (Number(validHrs) > 24) {\r\n          enqueueSnackbar('Hold on! Your entered task exceeds 24 hrs in a day', {\r\n            variant: 'error',\r\n            action: (key) => (\r\n              <MIconButton size=\"small\" onClick={() => closeSnackbar(key)}>\r\n                <Icon icon={closeFill} />\r\n              </MIconButton>\r\n            )\r\n          });\r\n\r\n          return;\r\n        }\r\n\r\n        if (Number(validHrs) === 0) {\r\n          enqueueSnackbar('Your daily task does not meet the required 8 hrs', {\r\n            variant: 'error',\r\n            action: (key) => (\r\n              <MIconButton size=\"small\" onClick={() => closeSnackbar(key)}>\r\n                <Icon icon={closeFill} />\r\n              </MIconButton>\r\n            )\r\n          });\r\n          return;\r\n        }\r\n\r\n        if (Number(validHrs) < 8) {\r\n          setTimeErrorOpen(true);\r\n          //   enqueueSnackbar('Your daily task does not meet the required 8 hrs', {\r\n          //     variant: 'error',\r\n          //     action: (key) => (\r\n          //       <MIconButton size=\"small\" onClick={() => closeSnackbar(key)}>\r\n          //         <Icon icon={closeFill} />\r\n          //       </MIconButton>\r\n          //     )\r\n          //   });\r\n          return;\r\n        }\r\n      }\r\n      const payload = {\r\n        requestHeader: {\r\n          SourceSystem: '',\r\n          UUID: '',\r\n          TimeStamp: ''\r\n        },\r\n        requestData: {\r\n          timesheetId,\r\n          date: value,\r\n          hours: timeConvert2Deci(sumMins),\r\n          minutes: sumMins.toString(),\r\n          usercomments: '',\r\n          action,\r\n          taskDetails: taskdetails,\r\n          calendar: calPayroll ? calPayroll.projectName : ''\r\n        }\r\n      };\r\n      dispatch(newCreateTimeSheetEntryAsync(payload));\r\n      setNewRow(false);\r\n    }\r\n  };\r\n\r\n  const handleForceSubmit = () => {\r\n    if (!calPayroll) {\r\n      enqueueSnackbar('Primary Project is required', {\r\n        variant: 'error',\r\n        action: (key) => (\r\n          <MIconButton size=\"small\" onClick={() => closeSnackbar(key)}>\r\n            <Icon icon={closeFill} />\r\n          </MIconButton>\r\n        )\r\n      });\r\n    } else {\r\n      const payload = {\r\n        requestHeader: {\r\n          SourceSystem: '',\r\n          UUID: '',\r\n          TimeStamp: ''\r\n        },\r\n        requestData: {\r\n          timesheetId,\r\n          date: value,\r\n          hours: timeConvert2Deci(sumMins),\r\n          minutes: sumMins.toString(),\r\n          usercomments: '',\r\n          action: 'submit',\r\n          taskDetails: taskdetails,\r\n          calendar: calPayroll ? calPayroll.projectName : ''\r\n        }\r\n      };\r\n\r\n      dispatch(newCreateTimeSheetEntryAsync(payload));\r\n      setTimeErrorOpen(false);\r\n      setNewRow(false);\r\n    }\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    dispatch(getCategoryLOVAsync());\r\n    dispatch(getStatusLOVAsync());\r\n    dispatch(getProjectLOVAsync());\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    if (tsDetails.calendar) {\r\n      setCalPayroll({ projectName: tsDetails.calendar });\r\n    } else {\r\n      const val = localStorage.getItem('calPayroll');\r\n      if (val) {\r\n        const result = val.includes('{\"projectName');\r\n        if (result) {\r\n          setCalPayroll(JSON.parse(val));\r\n        } else {\r\n          setCalPayroll('');\r\n        }\r\n      } else {\r\n        setCalPayroll('');\r\n      }\r\n    }\r\n  }, [tsDetails]);\r\n\r\n  React.useEffect(() => {\r\n    if (!value) {\r\n      dispatch(setTimeSheetEmptyValue([]));\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [value]);\r\n\r\n  React.useEffect(() => {\r\n    if (error) {\r\n      enqueueSnackbar(error, {\r\n        variant: 'error',\r\n        action: (key) => (\r\n          <MIconButton size=\"small\" onClick={() => closeSnackbar(key)}>\r\n            <Icon icon={closeFill} />\r\n          </MIconButton>\r\n        )\r\n      });\r\n      dispatch(setErrorNull());\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [error]);\r\n\r\n  return (\r\n    <Page title={title}>\r\n      <Container maxWidth={themeStretch ? false : 'lg'}>\r\n        <HeaderBreadcrumbs\r\n          heading={title}\r\n          links={[{ name: 'Dashboard', href: PATH_DASHBOARD.general.root }, { name: 'Timesheet Entry' }]}\r\n          action={\r\n            <>\r\n              <Button\r\n                variant=\"contained\"\r\n                component={RouterLink}\r\n                disabled={(userDetails ? userDetails.is_bulk_upload === 'N' : false) && true}\r\n                to={PATH_DASHBOARD.timesheet.timeSheetBulkUpload}\r\n                startIcon={<Icon icon={cloudUploadFill} />}\r\n              >\r\n                Bulk Upload\r\n              </Button>\r\n            </>\r\n          }\r\n        />\r\n        <Card>\r\n          <CardContent>\r\n            <Stack spacing={2}>\r\n              {status === 'APPROVED' && (\r\n                <Alert severity=\"success\">\r\n                  <AlertTitle>Approved</AlertTitle>Your timesheet for the day has been approved by your manager\r\n                </Alert>\r\n              )}\r\n              {status === 'SUBMITTED' && (\r\n                <Alert severity=\"info\">\r\n                  <AlertTitle>Submitted</AlertTitle>You have submitted your timesheet for the day. Awaiting your manager\r\n                  response to your timesheet\r\n                </Alert>\r\n              )}\r\n              {status === 'REJECTED' && (\r\n                <Alert severity=\"error\">\r\n                  <AlertTitle>Rejected</AlertTitle>You have submitted timesheet for the day rejected by your manager\r\n                </Alert>\r\n              )}\r\n              {status === 'DRAFT' && (\r\n                <Alert severity=\"warning\">\r\n                  <AlertTitle>Note</AlertTitle>Yet you have not submitted your timesheet\r\n                </Alert>\r\n              )}\r\n              {managercomments && (\r\n                <Alert severity=\"info\">\r\n                  <AlertTitle>Manager Comments</AlertTitle>\r\n                  {managercomments}\r\n                </Alert>\r\n              )}\r\n            </Stack>\r\n            <Box m={2}>\r\n              <Stack\r\n                direction={{ xs: 'column', sm: 'column', md: 'row' }}\r\n                spacing={{ xs: 1, sm: 2, md: 4 }}\r\n                justifyContent=\"space-between\"\r\n              >\r\n                <DatePicker\r\n                  label=\"Date\"\r\n                  value={value}\r\n                  inputFormat=\"dd/MM/yyyy\"\r\n                  disableFuture\r\n                  fullWidth\r\n                  minDate={previousWeek}\r\n                  onChange={(newValue) => {\r\n                    if (newValue) {\r\n                      const parseddate = format(newValue, 'yyyy-MM-dd');\r\n                      handleChange(parseddate);\r\n                    }\r\n                  }}\r\n                  // onChangeRaw={(e) => e.preventDefault()}\r\n                  onKeyDown={(e) => e.preventDefault()}\r\n                  disabled={isLoading}\r\n                  renderInput={(params) => (\r\n                    <TextField fullWidth size=\"small\" {...params} onKeyDown={(e) => e.preventDefault()} />\r\n                  )}\r\n                />{' '}\r\n                {/* <FormControl fullWidth variant=\"outlined\" size=\"small\" required>\r\n                  <InputLabel id=\"category-selectIplabel\">Primary Project</InputLabel>\r\n                  <Select\r\n                    labelId=\"categorylabelid\"\r\n                    id=\"calendar-payroll\"\r\n                    label=\"Primary Project\"\r\n                    name=\"calPayroll\"\r\n                    placeholder=\"Select\"\r\n                    value={calPayroll}\r\n                    onChange={handlePayRoll}\r\n                  >\r\n                    <MenuItem value=\"\">Select</MenuItem>\r\n                    {projectLOV.map((_x, i) => (\r\n                      <MenuItem key={i} value={_x.name}>\r\n                        {_x.name}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl> */}\r\n                <Autocomplete\r\n                  disablePortal\r\n                  size=\"small\"\r\n                  autoHighlight\r\n                  fullWidth\r\n                  id=\"calendar-payroll\"\r\n                  value={calPayroll}\r\n                  onChange={(_event, newValue) => {\r\n                    if (newValue) {\r\n                      const nameVal = {\r\n                        projectName: newValue.projectName\r\n                      };\r\n                      setCalPayroll(nameVal);\r\n                      localStorage.setItem('calPayroll', JSON.stringify(nameVal));\r\n                    } else {\r\n                      setCalPayroll('');\r\n                      localStorage.setItem('calPayroll', '');\r\n                    }\r\n                  }}\r\n                  options={projectLOV}\r\n                  isOptionEqualToValue={(option, value) => option === value}\r\n                  getOptionLabel={(option) => option.projectName || ''}\r\n                  renderInput={(params) => (\r\n                    <TextField size=\"small\" fullWidth variant=\"outlined\" {...params} label=\"Primary Project\" />\r\n                  )}\r\n                />\r\n                <div>\r\n                  <Stack spacing={2} direction={{ xs: 'column', sm: 'column', md: 'row' }}>\r\n                    {!isNewRowEnabled && (\r\n                      <Tooltip title=\"Add new row\" placement=\"top\">\r\n                        <span>\r\n                          <Button\r\n                            fullWidth\r\n                            size=\"small\"\r\n                            variant=\"contained\"\r\n                            startIcon={<AddIcon />}\r\n                            disabled={!value || status === 'SUBMITTED' || status === 'APPROVED' || isLoading}\r\n                            onClick={() => setNewRow(!isNewRowEnabled)}\r\n                          >\r\n                            Add\r\n                          </Button>\r\n                        </span>\r\n                      </Tooltip>\r\n                    )}\r\n                    {isNewRowEnabled && (\r\n                      <Tooltip title=\"Hide add row\" placement=\"top\">\r\n                        <span>\r\n                          <Button\r\n                            fullWidth\r\n                            size=\"small\"\r\n                            variant=\"outlined\"\r\n                            startIcon={<ClearIcon />}\r\n                            disabled={!value || status === 'SUBMITTED' || status === 'APPROVED' || isLoading}\r\n                            onClick={() => setNewRow(!isNewRowEnabled)}\r\n                          >\r\n                            Cancel\r\n                          </Button>\r\n                        </span>\r\n                      </Tooltip>\r\n                    )}{' '}\r\n                    <LoadingButton\r\n                      fullWidth\r\n                      size=\"small\"\r\n                      variant=\"contained\"\r\n                      loading={isLoading}\r\n                      startIcon={<SaveIcon />}\r\n                      onClick={() => handleSubmit('save')}\r\n                      disabled={!value || status === 'SUBMITTED' || status === 'APPROVED' || isLoading}\r\n                    >\r\n                      Save\r\n                    </LoadingButton>{' '}\r\n                    <LoadingButton\r\n                      fullWidth\r\n                      size=\"small\"\r\n                      variant=\"contained\"\r\n                      loading={isLoading}\r\n                      endIcon={<SendIcon />}\r\n                      onClick={() => handleSubmit('submit')}\r\n                      disabled={!value || status === 'SUBMITTED' || status === 'APPROVED' || isLoading}\r\n                    >\r\n                      Submit\r\n                    </LoadingButton>\r\n                  </Stack>\r\n                </div>\r\n              </Stack>\r\n            </Box>\r\n            <TableContainer component={Paper}>\r\n              {isLoading && <LinearProgress />}\r\n              <Table>\r\n                <TableHead>\r\n                  <TableRow style={{ whiteSpace: 'nowrap' }}>\r\n                    <TableCell>S.No.</TableCell>\r\n                    <TableCell>Category</TableCell>\r\n                    <TableCell>Project</TableCell>\r\n                    <TableCell>Activity</TableCell>\r\n                    <TableCell>Status</TableCell>\r\n                    <TableCell>Time spent (in mins)</TableCell>\r\n                    <TableCell>Remarks</TableCell>\r\n                    <TableCell>Actions</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n\r\n                {/* {isNewRowEnabled && (\r\n                  <TableBody>\r\n                    <TableRow>\r\n                      <TableCell>\r\n                        <FastForwardIcon />\r\n                      </TableCell>\r\n                      <TableCell style={{ width: '30%' }}>\r\n                        <FormControl fullWidth variant=\"standard\" size=\"small\" required>\r\n                          <InputLabel id=\"category-select-label\">Category</InputLabel>\r\n                          <Select\r\n                            labelId=\"category-select-label\"\r\n                            id=\"category-select\"\r\n                            label=\"Category\"\r\n                            name=\"category\"\r\n                            value={addRowDetails.category}\r\n                            onChange={handleChangeNewRow}\r\n                          >\r\n                            <MenuItem value=\"\">Select</MenuItem>\r\n                            {categoryLOV.map((_x, i) => (\r\n                              <MenuItem key={i} value={_x.value}>\r\n                                {_x.value}\r\n                              </MenuItem>\r\n                            ))}\r\n                          </Select>\r\n                        </FormControl>\r\n                      </TableCell>\r\n                      <TableCell style={{ width: '30%' }}>\r\n                        <FormControl fullWidth variant=\"standard\" size=\"small\" required>\r\n                          <InputLabel id=\"Project-select-label\">Project</InputLabel>\r\n                          <Select\r\n                            labelId=\"Project-select-label\"\r\n                            id=\"Project-select\"\r\n                            name=\"project\"\r\n                            label=\"Project\"\r\n                            value={addRowDetails.project}\r\n                            onChange={handleChangeNewRow}\r\n                          >\r\n                            <MenuItem value=\"\">Select</MenuItem>\r\n                            {projectLOV.map((_x, i) => (\r\n                              <MenuItem key={i} value={_x.name}>\r\n                                {_x.name}\r\n                              </MenuItem>\r\n                            ))}\r\n                          </Select>\r\n                        </FormControl>\r\n                      </TableCell>\r\n                      <TableCell style={{ width: '60%' }}>\r\n                        <TextField\r\n                          fullWidth\r\n                          id=\"activity-multiline-static\"\r\n                          label=\"Activity\"\r\n                          name=\"activity\"\r\n                          multiline\r\n                          variant=\"standard\"\r\n                          value={addRowDetails.activity}\r\n                          onChange={handleChangeNewRow}\r\n                          inputProps={{ maxLength: 255 }}\r\n                          required\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <FormControl fullWidth variant=\"standard\" size=\"small\" required>\r\n                          <InputLabel id=\"Status-select-label\">Status</InputLabel>\r\n                          <Select\r\n                            labelId=\"Status-select-label\"\r\n                            id=\"Status-select\"\r\n                            label=\"Status\"\r\n                            name=\"status\"\r\n                            value={addRowDetails.status}\r\n                            onChange={handleChangeNewRow}\r\n                          >\r\n                            <MenuItem value=\"\">Select</MenuItem>\r\n                            {statuses.map((_x, i) => (\r\n                              <MenuItem key={i} value={_x.value}>\r\n                                {_x.value}\r\n                              </MenuItem>\r\n                            ))}\r\n                          </Select>\r\n                        </FormControl>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <TextField\r\n                          fullWidth\r\n                          variant=\"standard\"\r\n                          size=\"small\"\r\n                          type=\"number\"\r\n                          name=\"minutes\"\r\n                          label=\"Time Spent\"\r\n                          inputProps={{ min: 0 }}\r\n                          value={addRowDetails.minutes}\r\n                          onChange={handleChangeNewRow}\r\n                          required\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <TextField\r\n                          fullWidth\r\n                          id=\"remarks-multiline-static\"\r\n                          label=\"Remarks\"\r\n                          multiline\r\n                          name=\"remarks\"\r\n                          variant=\"standard\"\r\n                          value={addRowDetails.remarks}\r\n                          onChange={handleChangeNewRow}\r\n                          inputProps={{ maxLength: 255 }}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Tooltip title=\"Save\" placement=\"top\">\r\n                          <IconButton\r\n                            color=\"primary\"\r\n                            aria-label=\"save\"\r\n                            component=\"span\"\r\n                            onClick={handleAddNewRow}\r\n                            disabled={!value || status === 'SUBMITTED' || status === 'APPROVED' || isLoading}\r\n                          >\r\n                            <AddIcon />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  </TableBody>\r\n                )} */}\r\n\r\n                {taskdetails.length === 0 && (\r\n                  <TableBody>\r\n                    <TableRow>\r\n                      <TableCell align=\"center\" colSpan={7} sx={{ py: 3 }}>\r\n                        <TaskNotFound />\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  </TableBody>\r\n                )}\r\n                <TableBody>\r\n                  {taskdetails.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row, index) => (\r\n                    <TableRow hover tabIndex={-1} key={index}>\r\n                      <TableCell>{index + 1 + page * rowsPerPage}</TableCell>\r\n                      <TableCell>{row.category}</TableCell>\r\n                      <TableCell>{row.project}</TableCell>\r\n                      <TableCell style={{ width: '30%', wordBreak: 'break-all' }}>{row.activity}</TableCell>\r\n                      <TableCell>\r\n                        <Chip\r\n                          label={row.status}\r\n                          color={\r\n                            // eslint-disable-next-line no-nested-ternary\r\n                            row.status === 'Completed'\r\n                              ? 'success'\r\n                              : row.status === 'In Process'\r\n                              ? 'secondary'\r\n                              : 'warning'\r\n                          }\r\n                          variant=\"outlined\"\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">{row.minutes}</TableCell>\r\n                      <TableCell style={{ width: '30%', wordBreak: 'break-all' }}>\r\n                        {row.remarks ? row.remarks : '---'}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Tooltip title=\"edit\" placement=\"top\">\r\n                          <IconButton\r\n                            color=\"primary\"\r\n                            aria-label=\"edit\"\r\n                            component=\"span\"\r\n                            onClick={() => handleDraweropen(row, index)}\r\n                            disabled={!value || status === 'SUBMITTED' || status === 'APPROVED' || isLoading}\r\n                          >\r\n                            <EditIcon />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                  {emptyRows > 0 && (\r\n                    <TableRow>\r\n                      <TableCell colSpan={6} />\r\n                    </TableRow>\r\n                  )}\r\n                </TableBody>\r\n\r\n                <TableFooter>\r\n                  <TableRow>\r\n                    <TableCell colSpan={4} />\r\n                    <TableCell>Total (mins) </TableCell>\r\n                    <TableCell align=\"center\">{sumMins}</TableCell>\r\n                  </TableRow>\r\n\r\n                  <TableRow>\r\n                    <TableCell colSpan={4} />\r\n                    <TableCell>Total (hrs) </TableCell>\r\n                    <TableCell align=\"center\">{timeConvert(sumMins)}</TableCell>\r\n                  </TableRow>\r\n                </TableFooter>\r\n              </Table>\r\n              <TablePagination\r\n                rowsPerPageOptions={[5, 10, 25]}\r\n                component=\"div\"\r\n                count={taskdetails.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                onPageChange={handleChangePage}\r\n                onRowsPerPageChange={handleChangeRowsPerPage}\r\n              />\r\n            </TableContainer>\r\n          </CardContent>\r\n        </Card>\r\n        <Drawer anchor=\"right\" open={isEditOpened} onClose={handleDrawerClose} hideBackdrop>\r\n          <Box m={5} sx={{ width: { sm: 'auto', md: drawerWidth } }} role=\"presentation\">\r\n            <Typography variant=\"h6\" gutterBottom component=\"div\" align=\"center\">\r\n              Edit details\r\n            </Typography>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12} sm={12} md={12}>\r\n                {/* <FormControl fullWidth variant=\"standard\" size=\"small\">\r\n                  <InputLabel id=\"category-select-label\">Category</InputLabel>\r\n                  <Select\r\n                    labelId=\"category-select-label\"\r\n                    id=\"category-select\"\r\n                    label=\"Category\"\r\n                    name=\"category\"\r\n                    value={editRowDetails.category}\r\n                    onChange={handleEditNewRow}\r\n                  >\r\n                    {categoryLOV.map((_x, i) => (\r\n                      <MenuItem key={i} value={_x.value}>\r\n                        {_x.value}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl> */}\r\n                <Autocomplete\r\n                  disablePortal\r\n                  autoHighlight\r\n                  id=\"CategorySelect\"\r\n                  value={selectedCategory}\r\n                  onChange={(_event, newValue) => {\r\n                    if (newValue) {\r\n                      setSelectedCategory(newValue);\r\n                    } else {\r\n                      setSelectedCategory('');\r\n                    }\r\n                  }}\r\n                  fullWidth\r\n                  options={categoryLOV}\r\n                  isOptionEqualToValue={(option, value) => option === value}\r\n                  getOptionLabel={(option) => option.value || ''}\r\n                  renderInput={(params) => <TextField variant=\"standard\" {...params} label=\"Category\" />}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={12} md={12}>\r\n                {/* <FormControl fullWidth variant=\"standard\" size=\"small\">\r\n                  <InputLabel id=\"Project-select-label\">Project</InputLabel>\r\n                  <Select\r\n                    labelId=\"Project-select-label\"\r\n                    id=\"Project-select\"\r\n                    name=\"project\"\r\n                    label=\"Project\"\r\n                    value={editRowDetails.project}\r\n                    onChange={handleEditNewRow}\r\n                  >\r\n                    {projectLOV.map((_x, i) => (\r\n                      <MenuItem key={i} value={_x.name}>\r\n                        {_x.name}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl> */}\r\n                <Autocomplete\r\n                  disablePortal\r\n                  autoHighlight\r\n                  id=\"Projectselect\"\r\n                  value={selectedProject}\r\n                  onChange={(_event, newValue) => {\r\n                    if (newValue) {\r\n                      setSelectedProject(newValue);\r\n                    } else {\r\n                      setSelectedProject('');\r\n                    }\r\n                  }}\r\n                  fullWidth\r\n                  options={projectLOV}\r\n                  isOptionEqualToValue={(option, value) => option === value}\r\n                  getOptionLabel={(option) => option.projectName || ''}\r\n                  renderInput={(params) => <TextField variant=\"standard\" {...params} label=\"Project\" />}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={12} md={12}>\r\n                <TextField\r\n                  fullWidth\r\n                  multiline\r\n                  size=\"small\"\r\n                  maxRows={4}\r\n                  name=\"activity\"\r\n                  variant=\"standard\"\r\n                  label=\"Activity Description\"\r\n                  value={editRowDetails.activity}\r\n                  onChange={handleEditNewRow}\r\n                  inputProps={{ maxLength: 255 }}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={12} md={12}>\r\n                <FormControl fullWidth variant=\"standard\" size=\"small\">\r\n                  <InputLabel id=\"Status-select-label\">Status</InputLabel>\r\n                  <Select\r\n                    labelId=\"Status-select-label\"\r\n                    id=\"Status-select\"\r\n                    label=\"Status\"\r\n                    name=\"status\"\r\n                    value={editRowDetails.status}\r\n                    onChange={handleEditNewRow}\r\n                  >\r\n                    {statuses.map((_x, i) => (\r\n                      <MenuItem key={i} value={_x.value}>\r\n                        {_x.value}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12} sm={12} md={12}>\r\n                <TextField\r\n                  fullWidth\r\n                  size=\"small\"\r\n                  type=\"number\"\r\n                  name=\"minutes\"\r\n                  variant=\"standard\"\r\n                  label=\"Time Spent(in mins)\"\r\n                  value={editRowDetails.minutes}\r\n                  onChange={handleEditNewRow}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={12} md={12}>\r\n                <TextField\r\n                  multiline\r\n                  maxRows={4}\r\n                  fullWidth\r\n                  name=\"remarks\"\r\n                  size=\"small\"\r\n                  variant=\"standard\"\r\n                  label=\"Remarks / Comments (if any)\"\r\n                  value={editRowDetails.remarks}\r\n                  onChange={handleEditNewRow}\r\n                  inputProps={{ maxLength: 255 }}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={12} md={6}>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  fullWidth\r\n                  startIcon={<ClearIcon />}\r\n                  onClick={handleDrawerClose}\r\n                  disabled={isLoading}\r\n                >\r\n                  Cancel\r\n                </Button>\r\n              </Grid>\r\n              <Grid item xs={12} sm={12} md={6}>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  fullWidth\r\n                  startIcon={<SaveIcon />}\r\n                  disabled={isLoading}\r\n                  onClick={handleEditRow}\r\n                >\r\n                  Save\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </Drawer>\r\n        <Drawer anchor=\"right\" open={isNewRowEnabled} onClose={() => setNewRow(!isNewRowEnabled)} hideBackdrop>\r\n          <Box m={5} sx={{ width: { sm: 'auto', md: drawerWidth } }} role=\"presentation\">\r\n            <Typography variant=\"h6\" gutterBottom component=\"div\" align=\"center\">\r\n              Add details\r\n            </Typography>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12} sm={12} md={12}>\r\n                {/* <FormControl fullWidth variant=\"standard\" size=\"small\">\r\n                  <InputLabel id=\"category-select-label\">Category</InputLabel>\r\n                  <Select\r\n                    labelId=\"category-select-label\"\r\n                    id=\"category-select\"\r\n                    label=\"Category\"\r\n                    name=\"category\"\r\n                    value={addRowDetails.category}\r\n                    onChange={handleChangeNewRow}\r\n                  >\r\n                    {categoryLOV.map((_x, i) => (\r\n                      <MenuItem key={i} value={_x.value}>\r\n                        {_x.value}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl> */}\r\n                <Autocomplete\r\n                  disablePortal\r\n                  autoHighlight\r\n                  id=\"Category-Select\"\r\n                  value={selectedCategory}\r\n                  onChange={(_event, newValue) => {\r\n                    if (newValue) {\r\n                      setSelectedCategory(newValue);\r\n                    } else {\r\n                      setSelectedCategory('');\r\n                    }\r\n                  }}\r\n                  fullWidth\r\n                  options={categoryLOV}\r\n                  isOptionEqualToValue={(option, value) => option.value === value.value}\r\n                  getOptionLabel={(option) => option.value || ''}\r\n                  renderInput={(params) => <TextField variant=\"standard\" {...params} label=\"Category\" />}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={12} md={12}>\r\n                {/* <FormControl fullWidth variant=\"standard\" size=\"small\">\r\n                  <InputLabel id=\"Project-select-label\">Project</InputLabel>\r\n                  <Select\r\n                    labelId=\"Project-select-label\"\r\n                    id=\"Project-select\"\r\n                    name=\"project\"\r\n                    label=\"Project\"\r\n                    value={addRowDetails.project}\r\n                    onChange={handleChangeNewRow}\r\n                  >\r\n                    {projectLOV.map((_x, i) => (\r\n                      <MenuItem key={i} value={_x.name}>\r\n                        {_x.name}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl> */}\r\n                <Autocomplete\r\n                  disablePortal\r\n                  autoHighlight\r\n                  id=\"Project-select\"\r\n                  value={selectedProject}\r\n                  onChange={(_event, newValue) => {\r\n                    if (newValue) {\r\n                      setSelectedProject(newValue);\r\n                    } else {\r\n                      setSelectedProject('');\r\n                    }\r\n                  }}\r\n                  fullWidth\r\n                  options={projectLOV}\r\n                  isOptionEqualToValue={(option, value) => option.projectName === value.projectName}\r\n                  getOptionLabel={(option) => option.projectName || ''}\r\n                  renderInput={(params) => <TextField variant=\"standard\" {...params} label=\"Project\" />}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={12} md={12}>\r\n                <TextField\r\n                  fullWidth\r\n                  multiline\r\n                  size=\"small\"\r\n                  variant=\"standard\"\r\n                  maxRows={4}\r\n                  name=\"activity\"\r\n                  label=\"Activity Description\"\r\n                  value={addRowDetails.activity}\r\n                  onChange={handleChangeNewRow}\r\n                  inputProps={{ maxLength: 255 }}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={12} md={12}>\r\n                <FormControl fullWidth variant=\"standard\" size=\"small\">\r\n                  <InputLabel id=\"Status-select-label\">Status</InputLabel>\r\n                  <Select\r\n                    labelId=\"Status-select-label\"\r\n                    id=\"Status-select\"\r\n                    label=\"Status\"\r\n                    name=\"status\"\r\n                    value={addRowDetails.status}\r\n                    onChange={handleChangeNewRow}\r\n                  >\r\n                    {statuses.map((_x, i) => (\r\n                      <MenuItem key={i} value={_x.value}>\r\n                        {_x.value}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12} sm={12} md={12}>\r\n                <TextField\r\n                  fullWidth\r\n                  size=\"small\"\r\n                  type=\"number\"\r\n                  variant=\"standard\"\r\n                  name=\"minutes\"\r\n                  label=\"Time Spent(in mins)\"\r\n                  value={addRowDetails.minutes}\r\n                  onChange={handleChangeNewRow}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={12} md={12}>\r\n                <TextField\r\n                  multiline\r\n                  maxRows={4}\r\n                  fullWidth\r\n                  name=\"remarks\"\r\n                  size=\"small\"\r\n                  variant=\"standard\"\r\n                  label=\"Remarks / Comments (if any)\"\r\n                  value={addRowDetails.remarks}\r\n                  onChange={handleChangeNewRow}\r\n                  inputProps={{ maxLength: 255 }}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={12} md={6}>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  fullWidth\r\n                  startIcon={<ClearIcon />}\r\n                  onClick={() => setNewRow(!isNewRowEnabled)}\r\n                  disabled={isLoading}\r\n                >\r\n                  Close\r\n                </Button>\r\n              </Grid>\r\n              <Grid item xs={12} sm={12} md={6}>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  fullWidth\r\n                  startIcon={<AddIcon />}\r\n                  disabled={isLoading}\r\n                  onClick={handleAddNewRow}\r\n                >\r\n                  Add\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </Drawer>\r\n        <Snackbar\r\n          open={isTimeError}\r\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\r\n          autoHideDuration={6000}\r\n          onClose={() => setTimeErrorOpen(false)}\r\n          message=\"Your daily task does not meet the required 8 hrs. Would you like to proceed anyway ?\"\r\n          action={\r\n            <Button color=\"secondary\" size=\"small\" onClick={handleForceSubmit}>\r\n              Yes, Proceed anyway\r\n            </Button>\r\n          }\r\n        />\r\n      </Container>\r\n    </Page>\r\n  );\r\n}\r\n"],"sourceRoot":""}