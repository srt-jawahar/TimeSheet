{"version":3,"sources":["components/HeaderBreadcrumbs.js","utils/timeconverions.js","components/TaskNotFound.js","pages/overtime/OverTime.js"],"names":["HeaderBreadcrumbs","links","action","heading","moreLink","sx","other","mb","display","alignItems","flexGrow","variant","gutterBottom","flexShrink","mt","isString","href","target","map","noWrap","timeConvert","n","hours","Number","rhours","Math","floor","minutes","rminutes","round","timeConvert2Deci","TaskNotFound","align","OverTime","themeStretch","useSettings","useSnackbar","enqueueSnackbar","closeSnackbar","title","React","useState","value","setValue","isNewRowEnabled","setNewRow","rowsPerPage","setRowsPerPage","isEditOpened","setDrawer","page","setPage","dispatch","useDispatch","overTimeTaskDetails","useSelector","getOverTimeDetails","console","log","overtimeId","getOverTimeIdFromTS","overtimeStatus","getOverTimeStatusFromTS","managercomments","getOverTimeManagerCommentsFromTS","categoryLOV","getCategoryLOVFromTS","projectLOV","getProjectLOVFromTS","isLoading","getIsLoadingFromTS","error","getErrorFromTS","userDetails","getUserDetailsFromAuth","category","project","activity","status","phase","remarks","addRowDetails","setAddRowDetails","index","editRowDetails","setEditRowDetails","today","Date","previousWeek","getFullYear","getMonth","getDate","overtime_applied_before","sumMins","length","o","reduce","a","c","emptyRows","max","handleDrawerClose","handleChangeNewRow","e","name","handleEditNewRow","handleSubmit","payload","requestHeader","SourceSystem","UUID","TimeStamp","requestData","date","toString","usercomments","taskDetails","overTimeEntryAsync","useEffect","getCategoryLOVAsync","getStatusLOVAsync","getProjectLOVAsync","key","size","onClick","icon","closeFill","maxWidth","PATH_DASHBOARD","general","root","spacing","severity","m","direction","xs","sm","md","justifyContent","label","inputFormat","minDate","onChange","newValue","_date","getOverTimeAsync","handleChange","format","disabled","renderInput","params","placement","fullWidth","startIcon","loading","endIcon","component","Paper","style","whiteSpace","colSpan","py","slice","row","hover","tabIndex","width","wordBreak","color","handleDraweropen","rowsPerPageOptions","count","onPageChange","event","newPage","onRowsPerPageChange","parseInt","anchor","open","onClose","hideBackdrop","role","container","item","id","labelId","_x","i","projectName","type","multiline","maxRows","inputProps","maxLength","isFormValid","indexOfFirstData","data","obj","splice","push","editRowsInOverTimeDetails","addOverTimeInTaskDetails"],"mappings":"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","file":"static/js/34.1ac9d4a1.chunk.js","sourcesContent":["import { isString } from 'lodash';\nimport PropTypes from 'prop-types';\n// material\nimport { Box, Typography, Link } from '@mui/material';\n//\nimport { MBreadcrumbs } from './@material-extend';\n\n// ----------------------------------------------------------------------\n\nHeaderBreadcrumbs.propTypes = {\n  links: PropTypes.array,\n  action: PropTypes.node,\n  heading: PropTypes.string.isRequired,\n  moreLink: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  sx: PropTypes.object\n};\n\nexport default function HeaderBreadcrumbs({ links, action, heading, moreLink = '' || [], sx, ...other }) {\n  return (\n    <Box sx={{ mb: 5, ...sx }}>\n      <Box sx={{ display: 'flex', alignItems: 'center' }}>\n        <Box sx={{ flexGrow: 1 }}>\n          <Typography variant=\"h4\" gutterBottom>\n            {heading}\n          </Typography>\n          <MBreadcrumbs links={links} {...other} />\n        </Box>\n\n        {action && <Box sx={{ flexShrink: 0 }}>{action}</Box>}\n      </Box>\n\n      <Box sx={{ mt: 2 }}>\n        {isString(moreLink) ? (\n          <Link href={moreLink} target=\"_blank\" variant=\"body2\">\n            {moreLink}\n          </Link>\n        ) : (\n          moreLink.map((href) => (\n            <Link noWrap key={href} href={href} variant=\"body2\" target=\"_blank\" sx={{ display: 'table' }}>\n              {href}\n            </Link>\n          ))\n        )}\n      </Box>\n    </Box>\n  );\n}\n","export const timeConvert = (n) => {\r\n  const num = Number(n);\r\n  const hours = num / 60;\r\n  const rhours = Math.floor(hours);\r\n  const minutes = (hours - rhours) * 60;\r\n  const rminutes = Math.round(minutes);\r\n  return `${rhours} hour(s) and ${rminutes} minute(s).`;\r\n};\r\n\r\nexport const timeConvert2Deci = (n) => {\r\n  const num = Number(n);\r\n  const hours = num / 60;\r\n  const rhours = Math.floor(hours);\r\n  const minutes = (hours - rhours) * 60;\r\n  const rminutes = Math.round(minutes);\r\n  return `${rhours}.${rminutes}`;\r\n};\r\n","import PropTypes from 'prop-types';\n// material\nimport { Paper, Typography } from '@mui/material';\n\n// ----------------------------------------------------------------------\n\nTaskNotFound.propTypes = {\n  searchQuery: PropTypes.string\n};\n\nexport default function TaskNotFound({ ...other }) {\n  return (\n    <Paper {...other}>\n      <Typography gutterBottom align=\"center\" variant=\"subtitle1\">\n        No task created yet!\n      </Typography>\n      <Typography variant=\"body2\" align=\"center\">\n        Select a date and create a task and then save it.\n      </Typography>\n    </Paper>\n  );\n}\n","import React from 'react';\r\nimport {\r\n  Container,\r\n  Card,\r\n  CardContent,\r\n  TableContainer,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  Paper,\r\n  Button,\r\n  Drawer,\r\n  Tooltip,\r\n  IconButton,\r\n  Alert,\r\n  Box,\r\n  Stack,\r\n  TextField,\r\n  TableBody,\r\n  FormControl,\r\n  Select,\r\n  MenuItem,\r\n  InputLabel,\r\n  TableFooter,\r\n  TablePagination,\r\n  Grid,\r\n  AlertTitle,\r\n  Typography,\r\n  LinearProgress\r\n} from '@mui/material';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport SaveIcon from '@mui/icons-material/Save';\r\nimport ClearIcon from '@mui/icons-material/Clear';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport SendIcon from '@mui/icons-material/Send';\r\n// import FastForwardIcon from '@mui/icons-material/FastForward';\r\nimport { format } from 'date-fns';\r\nimport { useSnackbar } from 'notistack';\r\nimport closeFill from '@iconify/icons-eva/close-fill';\r\nimport { DatePicker, LoadingButton } from '@mui/lab';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Icon } from '@iconify/react';\r\nimport { PATH_DASHBOARD } from '../../routes/paths';\r\nimport HeaderBreadcrumbs from '../../components/HeaderBreadcrumbs';\r\nimport useSettings from '../../hooks/useSettings';\r\nimport Page from '../../components/Page';\r\nimport { timeConvert2Deci, timeConvert } from '../../utils/timeconverions';\r\nimport {\r\n  getOverTimeDetails,\r\n  getCategoryLOVFromTS,\r\n  getProjectLOVFromTS,\r\n  getIsLoadingFromTS,\r\n  editRowsInOverTimeDetails,\r\n  getCategoryLOVAsync,\r\n  getStatusLOVAsync,\r\n  getProjectLOVAsync,\r\n  getErrorFromTS,\r\n  getOverTimeAsync,\r\n  addOverTimeInTaskDetails,\r\n  getOverTimeIdFromTS,\r\n  overTimeEntryAsync,\r\n  getOverTimeStatusFromTS,\r\n  getOverTimeManagerCommentsFromTS\r\n} from '../../redux/slices/timesheetSlice';\r\nimport { getUserDetailsFromAuth } from '../../redux/slices/authSlice';\r\nimport TaskNotFound from '../../components/TaskNotFound';\r\nimport { MIconButton } from '../../components/@material-extend';\r\n\r\nexport default function OverTime() {\r\n  const { themeStretch } = useSettings();\r\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\r\n  const title = 'OverTime Entry';\r\n  const [value, setValue] = React.useState(null);\r\n  const [isNewRowEnabled, setNewRow] = React.useState(false);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n  const [isEditOpened, setDrawer] = React.useState(false);\r\n  // const [isTimeError, setTimeErrorOpen] = React.useState(false);\r\n  const [page, setPage] = React.useState(0);\r\n  const dispatch = useDispatch();\r\n  const overTimeTaskDetails = useSelector(getOverTimeDetails);\r\n  console.log(overTimeTaskDetails);\r\n  const overtimeId = useSelector(getOverTimeIdFromTS);\r\n  const overtimeStatus = useSelector(getOverTimeStatusFromTS);\r\n  const managercomments = useSelector(getOverTimeManagerCommentsFromTS);\r\n  const categoryLOV = useSelector(getCategoryLOVFromTS);\r\n  const projectLOV = useSelector(getProjectLOVFromTS);\r\n  const isLoading = useSelector(getIsLoadingFromTS);\r\n  const error = useSelector(getErrorFromTS);\r\n  const drawerWidth = 350;\r\n  const userDetails = useSelector(getUserDetailsFromAuth);\r\n  const [addRowDetails, setAddRowDetails] = React.useState({\r\n    category: '',\r\n    project: '',\r\n    activity: '',\r\n    status: '',\r\n    phase: '',\r\n    minutes: '',\r\n    remarks: ''\r\n  });\r\n  const [editRowDetails, setEditRowDetails] = React.useState({\r\n    index: null,\r\n    category: '',\r\n    project: '',\r\n    activity: '',\r\n    status: '',\r\n    phase: '',\r\n    minutes: '',\r\n    remarks: ''\r\n  });\r\n  const today = new Date();\r\n  const previousWeek = new Date(\r\n    today.getFullYear(),\r\n    today.getMonth(),\r\n    today.getDate() - (userDetails ? userDetails.overtime_applied_before : 7)\r\n  );\r\n\r\n  const sumMins =\r\n    overTimeTaskDetails.length === 0\r\n      ? 0\r\n      : overTimeTaskDetails.map((o) => o.minutes).reduce((a, c) => Number(a) + Number(c));\r\n\r\n  const emptyRows = page > 0 ? Math.max(0, (1 + page) * rowsPerPage - overTimeTaskDetails.length) : 0;\r\n\r\n  const handleChange = (_date) => {\r\n    if (_date) {\r\n      const payload = {\r\n        requestHeader: {\r\n          SourceSystem: '',\r\n          UUID: '',\r\n          TimeStamp: ''\r\n        },\r\n        requestData: {\r\n          date: _date\r\n        }\r\n      };\r\n      dispatch(getOverTimeAsync(payload));\r\n      setValue(_date);\r\n    }\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const handleDraweropen = (row, index) => {\r\n    setNewRow(false);\r\n    setEditRowDetails({\r\n      index,\r\n      category: row.category,\r\n      project: row.project,\r\n      activity: row.activity,\r\n      status: row.status,\r\n      phase: row.phase,\r\n      minutes: row.minutes,\r\n      remarks: row.remarks\r\n    });\r\n    setDrawer(true);\r\n  };\r\n\r\n  const handleDrawerClose = () => {\r\n    setDrawer(false);\r\n  };\r\n\r\n  const handleChangeNewRow = (e) => {\r\n    setAddRowDetails({ ...addRowDetails, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const handleEditNewRow = (e) => {\r\n    setEditRowDetails({ ...editRowDetails, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const handleAddNewRow = () => {\r\n    let isFormValid = true;\r\n\r\n    if (!addRowDetails.project) {\r\n      isFormValid = false;\r\n      enqueueSnackbar('Project is required', {\r\n        variant: 'error',\r\n        action: (key) => (\r\n          <MIconButton size=\"small\" onClick={() => closeSnackbar(key)}>\r\n            <Icon icon={closeFill} />\r\n          </MIconButton>\r\n        )\r\n      });\r\n    }\r\n    if (!addRowDetails.activity) {\r\n      isFormValid = false;\r\n      enqueueSnackbar('Activity is required', {\r\n        variant: 'error',\r\n        action: (key) => (\r\n          <MIconButton size=\"small\" onClick={() => closeSnackbar(key)}>\r\n            <Icon icon={closeFill} />\r\n          </MIconButton>\r\n        )\r\n      });\r\n    }\r\n    if (!addRowDetails.minutes) {\r\n      isFormValid = false;\r\n      enqueueSnackbar('Minutes is required', {\r\n        variant: 'error',\r\n        action: (key) => (\r\n          <MIconButton size=\"small\" onClick={() => closeSnackbar(key)}>\r\n            <Icon icon={closeFill} />\r\n          </MIconButton>\r\n        )\r\n      });\r\n    }\r\n\r\n    if (isFormValid) {\r\n      enqueueSnackbar('Added Successfully! But not saved yet', {\r\n        variant: 'success',\r\n        action: (key) => (\r\n          <MIconButton size=\"small\" onClick={() => closeSnackbar(key)}>\r\n            <Icon icon={closeFill} />\r\n          </MIconButton>\r\n        )\r\n      });\r\n      setAddRowDetails({\r\n        category: '',\r\n        project: '',\r\n        activity: '',\r\n        status: '',\r\n        phase: '',\r\n        minutes: '',\r\n        remarks: ''\r\n      });\r\n\r\n      dispatch(addOverTimeInTaskDetails(addRowDetails));\r\n    }\r\n  };\r\n\r\n  const handleEditRow = () => {\r\n    let isFormValid = true;\r\n\r\n    if (!editRowDetails.category) {\r\n      isFormValid = false;\r\n      enqueueSnackbar('Category is required', {\r\n        variant: 'error',\r\n        action: (key) => (\r\n          <MIconButton size=\"small\" onClick={() => closeSnackbar(key)}>\r\n            <Icon icon={closeFill} />\r\n          </MIconButton>\r\n        )\r\n      });\r\n    }\r\n    if (!editRowDetails.project) {\r\n      isFormValid = false;\r\n      enqueueSnackbar('Project is required', {\r\n        variant: 'error',\r\n        action: (key) => (\r\n          <MIconButton size=\"small\" onClick={() => closeSnackbar(key)}>\r\n            <Icon icon={closeFill} />\r\n          </MIconButton>\r\n        )\r\n      });\r\n    }\r\n    if (!editRowDetails.activity) {\r\n      isFormValid = false;\r\n      enqueueSnackbar('Activity is required', {\r\n        variant: 'error',\r\n        action: (key) => (\r\n          <MIconButton size=\"small\" onClick={() => closeSnackbar(key)}>\r\n            <Icon icon={closeFill} />\r\n          </MIconButton>\r\n        )\r\n      });\r\n    }\r\n    if (!editRowDetails.minutes) {\r\n      isFormValid = false;\r\n      enqueueSnackbar('Minutes is required', {\r\n        variant: 'error',\r\n        action: (key) => (\r\n          <MIconButton size=\"small\" onClick={() => closeSnackbar(key)}>\r\n            <Icon icon={closeFill} />\r\n          </MIconButton>\r\n        )\r\n      });\r\n    }\r\n    // if (!editRowDetails.status) {\r\n    //   isFormValid = false;\r\n    //   enqueueSnackbar('Status is required', {\r\n    //     variant: 'error',\r\n    //     action: (key) => (\r\n    //       <MIconButton size=\"small\" onClick={() => closeSnackbar(key)}>\r\n    //         <Icon icon={closeFill} />\r\n    //       </MIconButton>\r\n    //     )\r\n    //   });\r\n    // }\r\n\r\n    if (isFormValid) {\r\n      enqueueSnackbar('Updated Successfully! But dont forget to save', {\r\n        variant: 'success',\r\n        action: (key) => (\r\n          <MIconButton size=\"small\" onClick={() => closeSnackbar(key)}>\r\n            <Icon icon={closeFill} />\r\n          </MIconButton>\r\n        )\r\n      });\r\n\r\n      const indexOfLastData = (page + 1) * rowsPerPage;\r\n      const indexOfFirstData = indexOfLastData - rowsPerPage;\r\n      const data = [...overTimeTaskDetails];\r\n      const obj = {\r\n        ...data[indexOfFirstData + editRowDetails.index],\r\n        ...editRowDetails\r\n      };\r\n\r\n      data.splice(indexOfFirstData + editRowDetails.index, 1);\r\n      data.push(obj);\r\n\r\n      dispatch(editRowsInOverTimeDetails(data));\r\n\r\n      handleDrawerClose(false);\r\n\r\n      setEditRowDetails({\r\n        category: '',\r\n        project: '',\r\n        activity: '',\r\n        status: '',\r\n        phase: '',\r\n        minutes: '',\r\n        remarks: ''\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (action) => {\r\n    if (action === 'submit') {\r\n      // if (Number(validHrs) > 24) {\r\n      //   enqueueSnackbar('Hold on! Your entered task exceeds 24 hrs in a day', {\r\n      //     variant: 'error',\r\n      //     action: (key) => (\r\n      //       <MIconButton size=\"small\" onClick={() => closeSnackbar(key)}>\r\n      //         <Icon icon={closeFill} />\r\n      //       </MIconButton>\r\n      //     )\r\n      //   });\r\n      //   return;\r\n      // }\r\n      // if (Number(validHrs) === 0) {\r\n      //   enqueueSnackbar('Your daily task does not meet the required 8 hrs', {\r\n      //     variant: 'error',\r\n      //     action: (key) => (\r\n      //       <MIconButton size=\"small\" onClick={() => closeSnackbar(key)}>\r\n      //         <Icon icon={closeFill} />\r\n      //       </MIconButton>\r\n      //     )\r\n      //   });\r\n      //   return;\r\n      // }\r\n      // if (Number(validHrs) < 8) {\r\n      //   setTimeErrorOpen(true);\r\n      //   //   enqueueSnackbar('Your daily task does not meet the required 8 hrs', {\r\n      //   //     variant: 'error',\r\n      //   //     action: (key) => (\r\n      //   //       <MIconButton size=\"small\" onClick={() => closeSnackbar(key)}>\r\n      //   //         <Icon icon={closeFill} />\r\n      //   //       </MIconButton>\r\n      //   //     )\r\n      //   //   });\r\n      //   return;\r\n      // }\r\n    }\r\n\r\n    const payload = {\r\n      requestHeader: {\r\n        SourceSystem: '',\r\n        UUID: '',\r\n        TimeStamp: ''\r\n      },\r\n      requestData: {\r\n        // timesheetId,\r\n        overtimeId,\r\n        date: value,\r\n        hours: timeConvert2Deci(sumMins),\r\n        minutes: sumMins.toString(),\r\n        usercomments: '',\r\n        action,\r\n        // taskDetails: taskdetails\r\n        taskDetails: overTimeTaskDetails\r\n      }\r\n    };\r\n    dispatch(overTimeEntryAsync(payload));\r\n    setNewRow(false);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    dispatch(getCategoryLOVAsync());\r\n    dispatch(getStatusLOVAsync());\r\n    dispatch(getProjectLOVAsync());\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  // React.useEffect(() => {\r\n  //   const payload = {\r\n  //     requestHeader: {\r\n  //       SourceSystem: '',\r\n  //       UUID: '',\r\n  //       TimeStamp: ''\r\n  //     },\r\n  //     requestData: {\r\n  //       date: value\r\n  //     }\r\n  //   };\r\n\r\n  //   dispatch(getTimeSheetEntryAsync(payload));\r\n  //   // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  // }, []);\r\n\r\n  React.useEffect(() => {\r\n    if (error) {\r\n      enqueueSnackbar(error, {\r\n        variant: 'error',\r\n        action: (key) => (\r\n          <MIconButton size=\"small\" onClick={() => closeSnackbar(key)}>\r\n            <Icon icon={closeFill} />\r\n          </MIconButton>\r\n        )\r\n      });\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [error]);\r\n\r\n  return (\r\n    <Page title={title}>\r\n      <Container maxWidth={themeStretch ? false : 'lg'}>\r\n        <HeaderBreadcrumbs\r\n          heading={title}\r\n          links={[{ name: 'Dashboard', href: PATH_DASHBOARD.general.root }, { name: 'OverTime Entry' }]}\r\n        />\r\n        <Card>\r\n          <CardContent>\r\n            <Stack spacing={2}>\r\n              {overtimeStatus === 'APPROVED' && (\r\n                <Alert severity=\"success\">\r\n                  <AlertTitle>Approved</AlertTitle>Your overtime request for the day has been approved by your manager\r\n                </Alert>\r\n              )}\r\n              {overtimeStatus === 'SUBMITTED' && (\r\n                <Alert severity=\"info\">\r\n                  <AlertTitle>Submitted</AlertTitle>You have submitted your overtime request for the day. Awaiting for\r\n                  your manager response to your overtime request\r\n                </Alert>\r\n              )}\r\n              {overtimeStatus === 'REJECTED' && (\r\n                <Alert severity=\"error\">\r\n                  <AlertTitle>Rejected</AlertTitle>You have submitted overtime request for the day rejected by your\r\n                  manager\r\n                </Alert>\r\n              )}\r\n              {overtimeStatus === 'DRAFT' && (\r\n                <Alert severity=\"warning\">\r\n                  <AlertTitle>Note</AlertTitle>Yet you have not submitted your overtime request\r\n                </Alert>\r\n              )}\r\n              {managercomments && (\r\n                <Alert severity=\"info\">\r\n                  <AlertTitle>Manager Comments</AlertTitle>\r\n                  {managercomments}\r\n                </Alert>\r\n              )}\r\n            </Stack>\r\n            <Box m={2}>\r\n              <Stack\r\n                direction={{ xs: 'column', sm: 'column', md: 'row' }}\r\n                spacing={{ xs: 1, sm: 2, md: 4 }}\r\n                justifyContent=\"space-between\"\r\n              >\r\n                <DatePicker\r\n                  label=\"Date\"\r\n                  value={value}\r\n                  inputFormat=\"dd/MM/yyyy\"\r\n                  minDate={previousWeek}\r\n                  onChange={(newValue) => {\r\n                    if (newValue) {\r\n                      const parseddate = format(newValue, 'yyyy-MM-dd');\r\n                      handleChange(parseddate);\r\n                    }\r\n                  }}\r\n                  disabled={isLoading}\r\n                  renderInput={(params) => <TextField size=\"small\" {...params} />}\r\n                />\r\n                <div>\r\n                  <Stack spacing={2} direction={{ xs: 'column', sm: 'column', md: 'row' }}>\r\n                    {!isNewRowEnabled && (\r\n                      <Tooltip title=\"Add new row\" placement=\"top\">\r\n                        <span>\r\n                          <Button\r\n                            fullWidth\r\n                            size=\"small\"\r\n                            variant=\"contained\"\r\n                            startIcon={<AddIcon />}\r\n                            disabled={\r\n                              !value || overtimeStatus === 'SUBMITTED' || overtimeStatus === 'APPROVED' || isLoading\r\n                            }\r\n                            onClick={() => setNewRow(!isNewRowEnabled)}\r\n                          >\r\n                            Add\r\n                          </Button>\r\n                        </span>\r\n                      </Tooltip>\r\n                    )}\r\n                    {isNewRowEnabled && (\r\n                      <Tooltip title=\"Hide add row\" placement=\"top\">\r\n                        <span>\r\n                          <Button\r\n                            fullWidth\r\n                            size=\"small\"\r\n                            variant=\"outlined\"\r\n                            startIcon={<ClearIcon />}\r\n                            disabled={\r\n                              !value || overtimeStatus === 'SUBMITTED' || overtimeStatus === 'APPROVED' || isLoading\r\n                            }\r\n                            onClick={() => setNewRow(!isNewRowEnabled)}\r\n                          >\r\n                            Cancel\r\n                          </Button>\r\n                        </span>\r\n                      </Tooltip>\r\n                    )}{' '}\r\n                    <LoadingButton\r\n                      fullWidth\r\n                      size=\"small\"\r\n                      variant=\"contained\"\r\n                      loading={isLoading}\r\n                      startIcon={<SaveIcon />}\r\n                      onClick={() => handleSubmit('save')}\r\n                      disabled={!value || overtimeStatus === 'SUBMITTED' || overtimeStatus === 'APPROVED' || isLoading}\r\n                    >\r\n                      Save\r\n                    </LoadingButton>{' '}\r\n                    <LoadingButton\r\n                      fullWidth\r\n                      size=\"small\"\r\n                      variant=\"contained\"\r\n                      loading={isLoading}\r\n                      endIcon={<SendIcon />}\r\n                      onClick={() => handleSubmit('submit')}\r\n                      disabled={!value || overtimeStatus === 'SUBMITTED' || overtimeStatus === 'APPROVED' || isLoading}\r\n                    >\r\n                      Submit\r\n                    </LoadingButton>\r\n                  </Stack>\r\n                </div>\r\n              </Stack>\r\n            </Box>\r\n            <TableContainer component={Paper}>\r\n              {isLoading && <LinearProgress />}\r\n              <Table>\r\n                <TableHead>\r\n                  <TableRow style={{ whiteSpace: 'nowrap' }}>\r\n                    <TableCell>S.No.</TableCell>\r\n                    <TableCell>Category</TableCell>\r\n                    <TableCell>Project</TableCell>\r\n                    <TableCell>Activity</TableCell>\r\n                    {/* <TableCell>Status</TableCell> */}\r\n                    <TableCell>Time required (in mins)</TableCell>\r\n                    <TableCell>Remarks</TableCell>\r\n                    <TableCell>Actions</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n\r\n                {/* {isNewRowEnabled && (\r\n                  <TableBody>\r\n                    <TableRow>\r\n                      <TableCell>\r\n                        <FastForwardIcon />\r\n                      </TableCell>\r\n                      <TableCell style={{ width: '30%' }}>\r\n                        <FormControl fullWidth variant=\"standard\" size=\"small\" required>\r\n                          <InputLabel id=\"category-select-label\">Category</InputLabel>\r\n                          <Select\r\n                            labelId=\"category-select-label\"\r\n                            id=\"category-select\"\r\n                            label=\"Category\"\r\n                            name=\"category\"\r\n                            value={addRowDetails.category}\r\n                            onChange={handleChangeNewRow}\r\n                          >\r\n                            <MenuItem value=\"\">Select</MenuItem>\r\n                            {categoryLOV.map((_x, i) => (\r\n                              <MenuItem key={i} value={_x.value}>\r\n                                {_x.value}\r\n                              </MenuItem>\r\n                            ))}\r\n                          </Select>\r\n                        </FormControl>\r\n                      </TableCell>\r\n                      <TableCell style={{ width: '30%' }}>\r\n                        <FormControl fullWidth variant=\"standard\" size=\"small\" required>\r\n                          <InputLabel id=\"Project-select-label\">Project</InputLabel>\r\n                          <Select\r\n                            labelId=\"Project-select-label\"\r\n                            id=\"Project-select\"\r\n                            name=\"project\"\r\n                            label=\"Project\"\r\n                            value={addRowDetails.project}\r\n                            onChange={handleChangeNewRow}\r\n                          >\r\n                            <MenuItem value=\"\">Select</MenuItem>\r\n                            {projectLOV.map((_x, i) => (\r\n                              <MenuItem key={i} value={_x.projectName}>\r\n                                {_x.projectName}\r\n                              </MenuItem>\r\n                            ))}\r\n                          </Select>\r\n                        </FormControl>\r\n                      </TableCell>\r\n                      <TableCell style={{ width: '60%' }}>\r\n                        <TextField\r\n                          fullWidth\r\n                          id=\"activity-multiline-static\"\r\n                          label=\"Activity\"\r\n                          name=\"activity\"\r\n                          multiline\r\n                          variant=\"standard\"\r\n                          value={addRowDetails.activity}\r\n                          onChange={handleChangeNewRow}\r\n                          inputProps={{ maxLength: 255 }}\r\n                          required\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <FormControl fullWidth variant=\"standard\" size=\"small\" required>\r\n                          <InputLabel id=\"Status-select-label\">Status</InputLabel>\r\n                          <Select\r\n                            labelId=\"Status-select-label\"\r\n                            id=\"Status-select\"\r\n                            label=\"Status\"\r\n                            name=\"status\"\r\n                            value={addRowDetails.status}\r\n                            onChange={handleChangeNewRow}\r\n                          >\r\n                            <MenuItem value=\"\">Select</MenuItem>\r\n                            {statuses.map((_x, i) => (\r\n                              <MenuItem key={i} value={_x.value}>\r\n                                {_x.value}\r\n                              </MenuItem>\r\n                            ))}\r\n                          </Select>\r\n                        </FormControl>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <TextField\r\n                          fullWidth\r\n                          variant=\"standard\"\r\n                          size=\"small\"\r\n                          type=\"number\"\r\n                          name=\"minutes\"\r\n                          label=\"Time Spent\"\r\n                          inputProps={{ min: 0 }}\r\n                          value={addRowDetails.minutes}\r\n                          onChange={handleChangeNewRow}\r\n                          required\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <TextField\r\n                          fullWidth\r\n                          id=\"remarks-multiline-static\"\r\n                          label=\"Remarks\"\r\n                          multiline\r\n                          name=\"remarks\"\r\n                          variant=\"standard\"\r\n                          value={addRowDetails.remarks}\r\n                          onChange={handleChangeNewRow}\r\n                          inputProps={{ maxLength: 255 }}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Tooltip title=\"Save\" placement=\"top\">\r\n                          <IconButton\r\n                            color=\"primary\"\r\n                            aria-label=\"save\"\r\n                            component=\"span\"\r\n                            onClick={handleAddNewRow}\r\n                            disabled={!value || status === 'SUBMITTED' || status === 'APPROVED' || isLoading}\r\n                          >\r\n                            <AddIcon />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  </TableBody>\r\n                )} */}\r\n\r\n                {overTimeTaskDetails.length === 0 && (\r\n                  <TableBody>\r\n                    <TableRow>\r\n                      <TableCell align=\"center\" colSpan={7} sx={{ py: 3 }}>\r\n                        <TaskNotFound />\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  </TableBody>\r\n                )}\r\n                <TableBody>\r\n                  {overTimeTaskDetails.length > 0 &&\r\n                    overTimeTaskDetails\r\n                      .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                      .map((row, index) => (\r\n                        <TableRow hover tabIndex={-1} key={index}>\r\n                          <TableCell>{index + 1 + page * rowsPerPage}</TableCell>\r\n                          <TableCell>{row.category}</TableCell>\r\n                          <TableCell>{row.project}</TableCell>\r\n                          <TableCell style={{ width: '30%', wordBreak: 'break-all' }}>{row.activity}</TableCell>\r\n                          {/* <TableCell>\r\n                            <Chip\r\n                              label={row.status}\r\n                              color={\r\n                                // eslint-disable-next-line no-nested-ternary\r\n                                row.status === 'APPROVED'\r\n                                  ? 'success'\r\n                                  : row.status === 'SUBMITTED'\r\n                                  ? 'secondary'\r\n                                  : 'warning'\r\n                              }\r\n                              variant=\"outlined\"\r\n                            />\r\n                          </TableCell> */}\r\n                          <TableCell align=\"center\">{row.minutes}</TableCell>\r\n                          {/* <TableCell align=\"center\">{row.submittedOn}</TableCell> */}\r\n                          <TableCell style={{ width: '30%', wordBreak: 'break-all' }}>\r\n                            {row.remarks ? row.remarks : '---'}\r\n                          </TableCell>\r\n                          <TableCell>\r\n                            <Tooltip title=\"edit\" placement=\"top\">\r\n                              <IconButton\r\n                                color=\"primary\"\r\n                                aria-label=\"edit\"\r\n                                component=\"span\"\r\n                                onClick={() => handleDraweropen(row, index)}\r\n                                disabled={\r\n                                  !value || overtimeStatus === 'SUBMITTED' || overtimeStatus === 'APPROVED' || isLoading\r\n                                }\r\n                              >\r\n                                <EditIcon />\r\n                              </IconButton>\r\n                            </Tooltip>\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      ))}\r\n                  {emptyRows > 0 && (\r\n                    <TableRow>\r\n                      <TableCell colSpan={6} />\r\n                    </TableRow>\r\n                  )}\r\n                </TableBody>\r\n\r\n                <TableFooter>\r\n                  <TableRow>\r\n                    <TableCell colSpan={4} />\r\n                    <TableCell>Total (mins) </TableCell>\r\n                    <TableCell align=\"center\">{sumMins}</TableCell>\r\n                  </TableRow>\r\n\r\n                  <TableRow>\r\n                    <TableCell colSpan={4} />\r\n                    <TableCell>Total (hrs) </TableCell>\r\n                    <TableCell align=\"center\">{timeConvert(sumMins)}</TableCell>\r\n                  </TableRow>\r\n                </TableFooter>\r\n              </Table>\r\n              <TablePagination\r\n                rowsPerPageOptions={[5, 10, 25]}\r\n                component=\"div\"\r\n                count={overTimeTaskDetails.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                onPageChange={handleChangePage}\r\n                onRowsPerPageChange={handleChangeRowsPerPage}\r\n              />\r\n            </TableContainer>\r\n          </CardContent>\r\n        </Card>\r\n        <Drawer anchor=\"right\" open={isEditOpened} onClose={handleDrawerClose} hideBackdrop>\r\n          <Box m={5} sx={{ width: { sm: 'auto', md: drawerWidth } }} role=\"presentation\">\r\n            <Typography variant=\"h6\" gutterBottom component=\"div\" align=\"center\">\r\n              Edit details\r\n            </Typography>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12} sm={12} md={12}>\r\n                <FormControl fullWidth variant=\"standard\" size=\"small\">\r\n                  <InputLabel id=\"category-select-label\">Category</InputLabel>\r\n                  <Select\r\n                    labelId=\"category-select-label\"\r\n                    id=\"category-select\"\r\n                    label=\"Category\"\r\n                    name=\"category\"\r\n                    value={editRowDetails.category}\r\n                    onChange={handleEditNewRow}\r\n                  >\r\n                    {categoryLOV.map((_x, i) => (\r\n                      <MenuItem key={i} value={_x.value}>\r\n                        {_x.value}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12} sm={12} md={12}>\r\n                <FormControl fullWidth variant=\"standard\" size=\"small\">\r\n                  <InputLabel id=\"Project-select-label\">Project</InputLabel>\r\n                  <Select\r\n                    labelId=\"Project-select-label\"\r\n                    id=\"Project-select\"\r\n                    name=\"project\"\r\n                    label=\"Project\"\r\n                    value={editRowDetails.project}\r\n                    onChange={handleEditNewRow}\r\n                  >\r\n                    {projectLOV.map((_x, i) => (\r\n                      <MenuItem key={i} value={_x.projectName}>\r\n                        {_x.projectName}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n\r\n              {/* <Grid item xs={12} sm={12} md={12}>\r\n                <FormControl fullWidth variant=\"standard\" size=\"small\">\r\n                  <InputLabel id=\"Status-select-label\">Status</InputLabel>\r\n                  <Select\r\n                    labelId=\"Status-select-label\"\r\n                    id=\"Status-select\"\r\n                    label=\"Status\"\r\n                    name=\"status\"\r\n                    value={editRowDetails.status}\r\n                    onChange={handleEditNewRow}\r\n                  >\r\n                    {statuses.map((_x, i) => (\r\n                      <MenuItem key={i} value={_x.value}>\r\n                        {_x.value}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid> */}\r\n              <Grid item xs={12} sm={12} md={12}>\r\n                <TextField\r\n                  fullWidth\r\n                  size=\"small\"\r\n                  type=\"number\"\r\n                  name=\"minutes\"\r\n                  variant=\"standard\"\r\n                  label=\"Time Required(in mins)\"\r\n                  value={editRowDetails.minutes}\r\n                  onChange={handleEditNewRow}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={12} md={12}>\r\n                <TextField\r\n                  fullWidth\r\n                  multiline\r\n                  size=\"small\"\r\n                  maxRows={4}\r\n                  name=\"activity\"\r\n                  variant=\"standard\"\r\n                  label=\"Activity Description\"\r\n                  value={editRowDetails.activity}\r\n                  onChange={handleEditNewRow}\r\n                  inputProps={{ maxLength: 255 }}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={12} md={12}>\r\n                <TextField\r\n                  multiline\r\n                  maxRows={4}\r\n                  fullWidth\r\n                  name=\"remarks\"\r\n                  size=\"small\"\r\n                  variant=\"standard\"\r\n                  label=\"Remarks / Comments (if any)\"\r\n                  value={editRowDetails.remarks}\r\n                  onChange={handleEditNewRow}\r\n                  inputProps={{ maxLength: 255 }}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={12} md={6}>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  fullWidth\r\n                  startIcon={<ClearIcon />}\r\n                  onClick={handleDrawerClose}\r\n                  disabled={isLoading}\r\n                >\r\n                  Cancel\r\n                </Button>\r\n              </Grid>\r\n              <Grid item xs={12} sm={12} md={6}>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  fullWidth\r\n                  startIcon={<SaveIcon />}\r\n                  disabled={isLoading}\r\n                  onClick={handleEditRow}\r\n                >\r\n                  Save\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </Drawer>\r\n        <Drawer anchor=\"right\" open={isNewRowEnabled} onClose={() => setNewRow(!isNewRowEnabled)} hideBackdrop>\r\n          <Box m={5} sx={{ width: { sm: 'auto', md: drawerWidth } }} role=\"presentation\">\r\n            <Typography variant=\"h6\" gutterBottom component=\"div\" align=\"center\">\r\n              Add details\r\n            </Typography>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12} sm={12} md={12}>\r\n                <FormControl fullWidth variant=\"standard\" size=\"small\">\r\n                  <InputLabel id=\"category-select-label\">Category</InputLabel>\r\n                  <Select\r\n                    labelId=\"category-select-label\"\r\n                    id=\"category-select\"\r\n                    label=\"Category\"\r\n                    name=\"category\"\r\n                    value={addRowDetails.category}\r\n                    onChange={handleChangeNewRow}\r\n                  >\r\n                    {categoryLOV.map((_x, i) => (\r\n                      <MenuItem key={i} value={_x.value}>\r\n                        {_x.value}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12} sm={12} md={12}>\r\n                <FormControl fullWidth variant=\"standard\" size=\"small\">\r\n                  <InputLabel id=\"Project-select-label\">Project</InputLabel>\r\n                  <Select\r\n                    labelId=\"Project-select-label\"\r\n                    id=\"Project-select\"\r\n                    name=\"project\"\r\n                    label=\"Project\"\r\n                    value={addRowDetails.project}\r\n                    onChange={handleChangeNewRow}\r\n                  >\r\n                    {projectLOV.map((_x, i) => (\r\n                      <MenuItem key={i} value={_x.projectName}>\r\n                        {_x.projectName}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n\r\n              {/* <Grid item xs={12} sm={12} md={12}>\r\n                <FormControl fullWidth variant=\"standard\" size=\"small\">\r\n                  <InputLabel id=\"Status-select-label\">Status</InputLabel>\r\n                  <Select\r\n                    labelId=\"Status-select-label\"\r\n                    id=\"Status-select\"\r\n                    label=\"Status\"\r\n                    name=\"status\"\r\n                    value={addRowDetails.status}\r\n                    onChange={handleChangeNewRow}\r\n                  >\r\n                    {statuses.map((_x, i) => (\r\n                      <MenuItem key={i} value={_x.value}>\r\n                        {_x.value}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid> */}\r\n              <Grid item xs={12} sm={12} md={12}>\r\n                <TextField\r\n                  fullWidth\r\n                  size=\"small\"\r\n                  type=\"number\"\r\n                  variant=\"standard\"\r\n                  name=\"minutes\"\r\n                  label=\"Time Required(in mins)\"\r\n                  value={addRowDetails.minutes}\r\n                  onChange={handleChangeNewRow}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={12} md={12}>\r\n                <TextField\r\n                  fullWidth\r\n                  multiline\r\n                  size=\"small\"\r\n                  variant=\"standard\"\r\n                  maxRows={4}\r\n                  name=\"activity\"\r\n                  label=\"Activity Description\"\r\n                  value={addRowDetails.activity}\r\n                  onChange={handleChangeNewRow}\r\n                  inputProps={{ maxLength: 255 }}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={12} md={12}>\r\n                <TextField\r\n                  multiline\r\n                  maxRows={4}\r\n                  fullWidth\r\n                  name=\"remarks\"\r\n                  size=\"small\"\r\n                  variant=\"standard\"\r\n                  label=\"Remarks / Comments (if any)\"\r\n                  value={addRowDetails.remarks}\r\n                  onChange={handleChangeNewRow}\r\n                  inputProps={{ maxLength: 255 }}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={12} md={6}>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  fullWidth\r\n                  startIcon={<ClearIcon />}\r\n                  onClick={() => setNewRow(!isNewRowEnabled)}\r\n                  disabled={isLoading}\r\n                >\r\n                  Cancel\r\n                </Button>\r\n              </Grid>\r\n              <Grid item xs={12} sm={12} md={6}>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  fullWidth\r\n                  startIcon={<AddIcon />}\r\n                  disabled={isLoading}\r\n                  onClick={handleAddNewRow}\r\n                >\r\n                  Add\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </Drawer>\r\n        {/* <Snackbar\r\n          open={isTimeError}\r\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\r\n          autoHideDuration={6000}\r\n          onClose={() => setTimeErrorOpen(false)}\r\n          message=\"Your daily task does not meet the required 8 hrs. Would you like to proceed anyway ?\"\r\n          action={\r\n            <Button color=\"secondary\" size=\"small\" onClick={handleForceSubmit}>\r\n              Yes, Proceed anyway\r\n            </Button>\r\n          }\r\n        /> */}\r\n      </Container>\r\n    </Page>\r\n  );\r\n}\r\n"],"sourceRoot":""}