{"version":3,"sources":["components/HeaderBreadcrumbs.js","pages/overtime/OverTimeApprovalList.js"],"names":["HeaderBreadcrumbs","links","action","heading","moreLink","sx","other","mb","display","alignItems","flexGrow","variant","gutterBottom","flexShrink","mt","isString","href","target","map","noWrap","descendingComparator","a","b","orderBy","headCells","id","numeric","disablePadding","label","EnhancedTableHead","props","order","onRequestSort","headCell","align","padding","sortDirection","active","direction","onClick","property","event","component","visuallyHidden","OverTimeApprovalList","React","setOrder","setOrderBy","selected","setSelected","page","setPage","rowsPerPage","setRowsPerPage","rows","useSelector","getOverTimeSingleListFromOverTimeAppr","useSnackbar","enqueueSnackbar","closeSnackbar","title","dispatch","useDispatch","navigate","useNavigate","themeStretch","useSettings","filterName","comments","setComments","timesheetIdDetails","getOverTimeDetailsFromOverTimeAppr","timeConvert2Deci","n","hours","Number","rhours","Math","floor","minutes","rminutes","round","sumMins","length","o","reduce","c","handleSubmit","value","overtimeId","finVal","i","over_time_id","payload","requestHeader","SourceSystem","UUID","TimeStamp","Date","requestData","date","managercomments","sendNotificationsTo","toString","usercomments","userId","postSingleOTApproveDetailsAsync","then","key","size","icon","closeFill","PATH_DASHBOARD","timesheet","overTimeApproval","catch","err","emptyRows","max","filteredUsers","array","comparator","query","stabilizedThis","el","index","sort","filter","_user","empId","toLowerCase","indexOf","applySortFilter","getComparator","maxWidth","name","root","startIcon","getOverTimeListAsync","spacing","style","fontWeight","substr","colSpan","fullWidth","autoFocus","multiline","onChange","e","inputProps","maxLength","minWidth","numSelected","onSelectAllClick","checked","newSelecteds","rowCount","slice","row","hover","tabIndex","category","project","width","wordBreak","activity","remarks","timeConvert","rowsPerPageOptions","count","onPageChange","newPage","onRowsPerPageChange","parseInt"],"mappings":"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","file":"static/js/45.74dfb0da.chunk.js","sourcesContent":["import { isString } from 'lodash';\nimport PropTypes from 'prop-types';\n// material\nimport { Box, Typography, Link } from '@mui/material';\n//\nimport { MBreadcrumbs } from './@material-extend';\n\n// ----------------------------------------------------------------------\n\nHeaderBreadcrumbs.propTypes = {\n  links: PropTypes.array,\n  action: PropTypes.node,\n  heading: PropTypes.string.isRequired,\n  moreLink: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  sx: PropTypes.object\n};\n\nexport default function HeaderBreadcrumbs({ links, action, heading, moreLink = '' || [], sx, ...other }) {\n  return (\n    <Box sx={{ mb: 5, ...sx }}>\n      <Box sx={{ display: 'flex', alignItems: 'center' }}>\n        <Box sx={{ flexGrow: 1 }}>\n          <Typography variant=\"h4\" gutterBottom>\n            {heading}\n          </Typography>\n          <MBreadcrumbs links={links} {...other} />\n        </Box>\n\n        {action && <Box sx={{ flexShrink: 0 }}>{action}</Box>}\n      </Box>\n\n      <Box sx={{ mt: 2 }}>\n        {isString(moreLink) ? (\n          <Link href={moreLink} target=\"_blank\" variant=\"body2\">\n            {moreLink}\n          </Link>\n        ) : (\n          moreLink.map((href) => (\n            <Link noWrap key={href} href={href} variant=\"body2\" target=\"_blank\" sx={{ display: 'table' }}>\n              {href}\n            </Link>\n          ))\n        )}\n      </Box>\n    </Box>\n  );\n}\n","import { filter } from 'lodash';\r\nimport * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Icon } from '@iconify/react';\r\nimport {\r\n  Card,\r\n  Button,\r\n  Box,\r\n  Table,\r\n  TableBody,\r\n  TextField,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TablePagination,\r\n  TableRow,\r\n  TableSortLabel,\r\n  Container,\r\n  CardContent,\r\n  Stack,\r\n  TableFooter\r\n} from '@mui/material';\r\nimport ThumbUpIcon from '@mui/icons-material/ThumbUp';\r\nimport ThumbDownIcon from '@mui/icons-material/ThumbDown';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\nimport { useSnackbar } from 'notistack';\r\nimport closeFill from '@iconify/icons-eva/close-fill';\r\nimport { visuallyHidden } from '@mui/utils';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useNavigate } from 'react-router';\r\nimport {\r\n  getOverTimeSingleListFromOverTimeAppr,\r\n  getOverTimeDetailsFromOverTimeAppr,\r\n  getOverTimeListAsync,\r\n  postSingleOTApproveDetailsAsync\r\n} from '../../redux/slices/overTimeApprovalSlice';\r\nimport HeaderBreadcrumbs from '../../components/HeaderBreadcrumbs';\r\nimport { PATH_DASHBOARD } from '../../routes/paths';\r\nimport useSettings from '../../hooks/useSettings';\r\nimport Page from '../../components/Page';\r\nimport Scrollbar from '../../components/Scrollbar';\r\nimport { MIconButton } from '../../components/@material-extend';\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction applySortFilter(array, comparator, query) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  if (query) {\r\n    return filter(array, (_user) => _user.empId.toLowerCase().indexOf(query.toLowerCase()) !== -1);\r\n  }\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: 'category',\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: 'Category'\r\n  },\r\n  {\r\n    id: 'project',\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: 'Project'\r\n  },\r\n  {\r\n    id: 'activity',\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: 'Activity'\r\n  },\r\n  // {\r\n  //   id: 'status',\r\n  //   numeric: false,\r\n  //   disablePadding: false,\r\n  //   label: 'Status'\r\n  // },\r\n  {\r\n    id: 'timespent',\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: 'Time Spent(IN MINS)'\r\n  },\r\n  {\r\n    id: 'remarks',\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: 'Remarks'\r\n  }\r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const { order, orderBy, onRequestSort } = props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align=\"center\"\r\n            padding={headCell.disablePadding ? 'none' : 'normal'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <Box component=\"span\" sx={visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </Box>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n  orderBy: PropTypes.string.isRequired\r\n};\r\n\r\nexport default function OverTimeApprovalList() {\r\n  const [order, setOrder] = React.useState('asc');\r\n  const [orderBy, setOrderBy] = React.useState('id');\r\n  const [selected, setSelected] = React.useState([]);\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n  const rows = useSelector(getOverTimeSingleListFromOverTimeAppr);\r\n  //   getTaskListFromTSAppr\r\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\r\n  const title = 'OverTime Approval List';\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const { themeStretch } = useSettings();\r\n  // eslint-disable-next-line no-unused-vars\r\n  const [filterName, setFilterName] = React.useState('');\r\n  const [comments, setComments] = React.useState('');\r\n  const timesheetIdDetails = useSelector(getOverTimeDetailsFromOverTimeAppr);\r\n  //   getTimesheetIdDetailsFromTSAppr\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    setOrder(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = rows.map((n) => n.id);\r\n      setSelected(newSelecteds);\r\n      return;\r\n    }\r\n    setSelected([]);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const handleComments = (e) => {\r\n    setComments(e.target.value);\r\n  };\r\n\r\n  const timeConvert = (n) => {\r\n    const num = Number(n);\r\n    const hours = num / 60;\r\n    const rhours = Math.floor(hours);\r\n    const minutes = (hours - rhours) * 60;\r\n    const rminutes = Math.round(minutes);\r\n    return `${rhours} hour(s) and ${rminutes} minute(s).`;\r\n  };\r\n\r\n  const timeConvert2Deci = (n) => {\r\n    const num = Number(n);\r\n    const hours = num / 60;\r\n    const rhours = Math.floor(hours);\r\n    const minutes = (hours - rhours) * 60;\r\n    const rminutes = Math.round(minutes);\r\n    return `${rhours}.${rminutes}`;\r\n  };\r\n\r\n  const sumMins = rows.length === 0 ? 0 : rows.map((o) => o.minutes).reduce((a, c) => Number(a) + Number(c));\r\n\r\n  const handleSubmit = (value) => {\r\n    let overtimeId = null;\r\n\r\n    const appVal = 'Approved Successfully';\r\n    const rejVal = 'Rejected Successfully';\r\n    let finVal = '';\r\n    if (value === 'approve') {\r\n      finVal = appVal;\r\n    } else {\r\n      finVal = rejVal;\r\n    }\r\n    for (let i = 0; i < rows.length; i += 1) {\r\n      overtimeId = rows[i].overtimeId.over_time_id;\r\n      break;\r\n    }\r\n\r\n    const payload = {\r\n      requestHeader: {\r\n        SourceSystem: '',\r\n        UUID: '',\r\n        TimeStamp: new Date()\r\n      },\r\n      requestData: {\r\n        overtimeId,\r\n        date: new Date(),\r\n        managercomments: comments,\r\n        sendNotificationsTo: '',\r\n        hours: timeConvert2Deci(sumMins),\r\n        minutes: sumMins.toString(),\r\n        usercomments: comments,\r\n        userId: 'userid',\r\n        action: value\r\n      }\r\n    };\r\n    dispatch(postSingleOTApproveDetailsAsync(payload))\r\n      .then(() => {\r\n        enqueueSnackbar(finVal, {\r\n          variant: 'success',\r\n          action: (key) => (\r\n            <MIconButton size=\"small\" onClick={() => closeSnackbar(key)}>\r\n              <Icon icon={closeFill} />\r\n            </MIconButton>\r\n          )\r\n        });\r\n        navigate(PATH_DASHBOARD.timesheet.overTimeApproval);\r\n      })\r\n      .catch((err) => {\r\n        enqueueSnackbar(err, {\r\n          variant: 'error',\r\n          action: (key) => (\r\n            <MIconButton size=\"small\" onClick={() => closeSnackbar(key)}>\r\n              <Icon icon={closeFill} />\r\n            </MIconButton>\r\n          )\r\n        });\r\n      });\r\n  };\r\n\r\n  const handleBack = () => {\r\n    dispatch(getOverTimeListAsync()).then(() => {\r\n      navigate(PATH_DASHBOARD.timesheet.overTimeApproval);\r\n    });\r\n  };\r\n\r\n  // Avoid a layout jump when reaching the last page with empty rows.\r\n  const emptyRows = page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;\r\n\r\n  const filteredUsers = applySortFilter(rows, getComparator(order, orderBy), filterName);\r\n\r\n  return (\r\n    <Page title={title}>\r\n      <Container maxWidth={themeStretch ? false : 'lg'}>\r\n        <HeaderBreadcrumbs\r\n          heading={title}\r\n          links={[\r\n            { name: 'Dashboard', href: PATH_DASHBOARD.root },\r\n            { name: 'OverTime Approval List', href: PATH_DASHBOARD.timesheet.overTimeApproval },\r\n            { name: 'Individual List' }\r\n          ]}\r\n          action={\r\n            <>\r\n              <Button variant=\"contained\" startIcon={<ArrowBackIcon />} onClick={() => handleBack()}>\r\n                Back\r\n              </Button>{' '}\r\n              <Button variant=\"contained\" startIcon={<ThumbUpIcon />} onClick={() => handleSubmit('approve')}>\r\n                Approve\r\n              </Button>{' '}\r\n              <Button variant=\"contained\" startIcon={<ThumbDownIcon />} onClick={() => handleSubmit('additional_info')}>\r\n                Reject\r\n              </Button>\r\n            </>\r\n          }\r\n        />\r\n\r\n        <Card>\r\n          {/* <ApprovalListToolbar\r\n            numSelected={selected.length}\r\n            filterName={filterName}\r\n            onFilterName={handleFilterByName}\r\n          /> */}\r\n\r\n          <CardContent>\r\n            <Stack spacing={3}>\r\n              <Scrollbar>\r\n                <TableContainer>\r\n                  <TableBody>\r\n                    <TableRow>\r\n                      <TableCell style={{ fontWeight: 'bolder' }}>Employee Id</TableCell>\r\n                      <TableCell align=\"center\">{timesheetIdDetails.empId}</TableCell>\r\n                      <TableCell style={{ fontWeight: 'bolder' }}>Employee Name</TableCell>\r\n                      <TableCell align=\"right\">{timesheetIdDetails.name}</TableCell>\r\n                      <TableCell style={{ fontWeight: 'bolder' }}>Date</TableCell>\r\n                      <TableCell align=\"right\">\r\n                        {timesheetIdDetails.date ? timesheetIdDetails.date.substr(0, 10) : '-'}\r\n                      </TableCell>\r\n                      <TableCell colSpan={3}>\r\n                        <TextField\r\n                          fullWidth\r\n                          autoFocus\r\n                          size=\"small\"\r\n                          label=\"Enter your comments\"\r\n                          multiline\r\n                          variant=\"standard\"\r\n                          name=\"comments\"\r\n                          value={comments}\r\n                          onChange={handleComments}\r\n                          inputProps={{ maxLength: 255 }}\r\n                        />\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  </TableBody>\r\n\r\n                  <Table sx={{ minWidth: 750 }} aria-labelledby=\"tableTitle\" size=\"small\">\r\n                    <EnhancedTableHead\r\n                      numSelected={selected.length}\r\n                      order={order}\r\n                      orderBy={orderBy}\r\n                      onSelectAllClick={handleSelectAllClick}\r\n                      onRequestSort={handleRequestSort}\r\n                      rowCount={rows.length}\r\n                    />\r\n                    <TableBody>\r\n                      {filteredUsers.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row, index) => (\r\n                        <TableRow hover tabIndex={-1} key={index}>\r\n                          <TableCell align=\"left\">{row.category}</TableCell>\r\n                          <TableCell align=\"left\">{row.project}</TableCell>\r\n                          <TableCell align=\"center\" style={{ width: '30%', wordBreak: 'break-all' }}>\r\n                            {row.activity}\r\n                          </TableCell>\r\n                          {/* <TableCell align=\"left\">{row.status}</TableCell> */}\r\n                          <TableCell align=\"center\">{row.minutes}</TableCell>\r\n                          <TableCell align=\"left\">{row.remarks}</TableCell>\r\n                        </TableRow>\r\n                      ))}\r\n                      {emptyRows > 0 && (\r\n                        <TableRow>\r\n                          <TableCell colSpan={6} />\r\n                        </TableRow>\r\n                      )}\r\n                    </TableBody>\r\n                    <TableFooter>\r\n                      <TableRow>\r\n                        <TableCell colSpan={3} />\r\n                        <TableCell>Total (mins) </TableCell>\r\n                        <TableCell align=\"center\">{sumMins}</TableCell>\r\n                      </TableRow>\r\n\r\n                      <TableRow>\r\n                        <TableCell colSpan={3} />\r\n                        <TableCell>Total (hrs) </TableCell>\r\n                        <TableCell align=\"center\">{timeConvert(sumMins)}</TableCell>\r\n                      </TableRow>\r\n                    </TableFooter>\r\n                  </Table>\r\n                  <TablePagination\r\n                    rowsPerPageOptions={[5, 10, 25]}\r\n                    component=\"div\"\r\n                    count={rows.length}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onPageChange={handleChangePage}\r\n                    onRowsPerPageChange={handleChangeRowsPerPage}\r\n                  />\r\n                </TableContainer>\r\n              </Scrollbar>\r\n            </Stack>\r\n          </CardContent>\r\n        </Card>\r\n      </Container>\r\n    </Page>\r\n  );\r\n}\r\n"],"sourceRoot":""}