{"version":3,"sources":["components/HeaderBreadcrumbs.js","pages/timesheet/KpiKraSelfRating.js"],"names":["HeaderBreadcrumbs","links","action","heading","moreLink","sx","other","mb","display","alignItems","flexGrow","variant","gutterBottom","flexShrink","mt","isString","href","target","map","noWrap","TABLE_HEAD","id","label","alignRight","KpiKraSelfRating","themeStretch","useSettings","title","useSnackbar","enqueueSnackbar","closeSnackbar","dispatch","useDispatch","React","useState","Date","date","setDate","rows","useSelector","getKpiKraSelfRatingList","details","getKpiKraSelfRating","isLoading","getIsLoadingFromKpi","sumKpi","length","o","rating","reduce","a","c","Number","sumKpiUser","selfrating","sumKpiManager","managerRating","handleSubmit","state","payload","formatteDate","format","submitKpiKraSelfRatingActionAsync","key","size","onClick","icon","closeFill","useEffect","getKpiKraForTheMonthAsync","maxWidth","name","PATH_DASHBOARD","general","root","m","direction","justifyContent","views","value","onChange","newValue","handleChange","renderInput","params","status","color","minWidth","style","whiteSpace","headCell","align","row","i","kpi","description","hover","tabIndex","fullWidth","displayEmpty","e","setSelfrating","handleSelfRatingChange","Array","from","_","_x","colSpan","disableSpacing","width","spacing","component","Paper","disabled"],"mappings":"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","file":"static/js/46.4b619f75.chunk.js","sourcesContent":["import { isString } from 'lodash';\nimport PropTypes from 'prop-types';\n// material\nimport { Box, Typography, Link } from '@mui/material';\n//\nimport { MBreadcrumbs } from './@material-extend';\n\n// ----------------------------------------------------------------------\n\nHeaderBreadcrumbs.propTypes = {\n  links: PropTypes.array,\n  action: PropTypes.node,\n  heading: PropTypes.string.isRequired,\n  moreLink: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  sx: PropTypes.object\n};\n\nexport default function HeaderBreadcrumbs({ links, action, heading, moreLink = '' || [], sx, ...other }) {\n  return (\n    <Box sx={{ mb: 5, ...sx }}>\n      <Box sx={{ display: 'flex', alignItems: 'center' }}>\n        <Box sx={{ flexGrow: 1 }}>\n          <Typography variant=\"h4\" gutterBottom>\n            {heading}\n          </Typography>\n          <MBreadcrumbs links={links} {...other} />\n        </Box>\n\n        {action && <Box sx={{ flexShrink: 0 }}>{action}</Box>}\n      </Box>\n\n      <Box sx={{ mt: 2 }}>\n        {isString(moreLink) ? (\n          <Link href={moreLink} target=\"_blank\" variant=\"body2\">\n            {moreLink}\n          </Link>\n        ) : (\n          moreLink.map((href) => (\n            <Link noWrap key={href} href={href} variant=\"body2\" target=\"_blank\" sx={{ display: 'table' }}>\n              {href}\n            </Link>\n          ))\n        )}\n      </Box>\n    </Box>\n  );\n}\n","import React from 'react';\r\nimport {\r\n  Container,\r\n  TableContainer,\r\n  Table,\r\n  TableRow,\r\n  TableHead,\r\n  TableBody,\r\n  TableCell,\r\n  Card,\r\n  CardContent,\r\n  CardActions,\r\n  Button,\r\n  Stack,\r\n  Paper,\r\n  FormControl,\r\n  Select,\r\n  MenuItem,\r\n  Box,\r\n  TextField,\r\n  Chip,\r\n  TableFooter\r\n} from '@mui/material';\r\nimport { format } from 'date-fns';\r\nimport DatePicker from '@mui/lab/DatePicker';\r\nimport { useSnackbar } from 'notistack';\r\nimport { Icon } from '@iconify/react';\r\nimport closeFill from '@iconify/icons-eva/close-fill';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { PATH_DASHBOARD } from '../../routes/paths';\r\nimport HeaderBreadcrumbs from '../../components/HeaderBreadcrumbs';\r\nimport useSettings from '../../hooks/useSettings';\r\nimport Page from '../../components/Page';\r\nimport Scrollbar from '../../components/Scrollbar';\r\nimport {\r\n  getKpiKraForTheMonthAsync,\r\n  getKpiKraSelfRatingList,\r\n  getKpiKraSelfRating,\r\n  setSelfrating,\r\n  submitKpiKraSelfRatingActionAsync,\r\n  getIsLoadingFromKpi\r\n} from '../../redux/slices/kpiKraSlice';\r\nimport { MIconButton } from '../../components/@material-extend';\r\n\r\nconst TABLE_HEAD = [\r\n  { id: 'kpi-name', label: 'KPI', alignRight: false },\r\n  { id: 'kpi-description', label: 'Description', alignRight: false },\r\n  { id: 'kpi-rating', label: 'Rating', alignRight: false },\r\n  { id: 'selfrating', label: 'Self Rating', alignRight: false },\r\n  { id: 'managerRating', label: 'Manager Rating', alignRight: false }\r\n];\r\n\r\nexport default function KpiKraSelfRating() {\r\n  const { themeStretch } = useSettings();\r\n  const title = 'KPI-KRA Self Rating';\r\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\r\n  const dispatch = useDispatch();\r\n\r\n  const [date, setDate] = React.useState(new Date());\r\n\r\n  const rows = useSelector(getKpiKraSelfRatingList);\r\n  const details = useSelector(getKpiKraSelfRating);\r\n  const isLoading = useSelector(getIsLoadingFromKpi);\r\n\r\n  const sumKpi = rows.length === 0 ? 0 : rows.map((o) => o.rating).reduce((a, c) => Number(a) + Number(c));\r\n  const sumKpiUser = rows.length === 0 ? 0 : rows.map((o) => o.selfrating).reduce((a, c) => Number(a) + Number(c));\r\n  const sumKpiManager =\r\n    rows.length === 0 ? 0 : rows.map((o) => o.managerRating).reduce((a, c) => Number(a) + Number(c));\r\n\r\n  const handleChange = (newValue) => {\r\n    setDate(newValue);\r\n    const formatteDate = format(newValue, 'MM/yyyy');\r\n    dispatch(getKpiKraForTheMonthAsync(formatteDate));\r\n  };\r\n\r\n  const handleSelfRatingChange = (row, e) => {\r\n    const payload = {\r\n      row,\r\n      value: e.target.value\r\n    };\r\n    dispatch(setSelfrating(payload));\r\n  };\r\n\r\n  const handleSubmit = (state) => {\r\n    const formatteDate = format(date, 'MM/yyyy');\r\n    const payload = {\r\n      state,\r\n      formatteDate\r\n    };\r\n    dispatch(submitKpiKraSelfRatingActionAsync(payload));\r\n\r\n    if (state === 'save') {\r\n      enqueueSnackbar('Saved successfully', {\r\n        variant: 'success',\r\n        action: (key) => (\r\n          <MIconButton size=\"small\" onClick={() => closeSnackbar(key)}>\r\n            <Icon icon={closeFill} />\r\n          </MIconButton>\r\n        )\r\n      });\r\n    } else {\r\n      enqueueSnackbar('Submitted successfully', {\r\n        variant: 'success',\r\n        action: (key) => (\r\n          <MIconButton size=\"small\" onClick={() => closeSnackbar(key)}>\r\n            <Icon icon={closeFill} />\r\n          </MIconButton>\r\n        )\r\n      });\r\n    }\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    const formatteDate = format(date, 'MM/yyyy');\r\n    dispatch(getKpiKraForTheMonthAsync(formatteDate));\r\n  }, [date, dispatch]);\r\n\r\n  return (\r\n    <Page title={title}>\r\n      <Container maxWidth={themeStretch ? false : 'lg'}>\r\n        <HeaderBreadcrumbs\r\n          heading={title}\r\n          links={[{ name: 'Dashboard', href: PATH_DASHBOARD.general.root }, { name: 'KPI-KRA Self Rating' }]}\r\n        />\r\n        <Card>\r\n          <Box m={2}>\r\n            <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\">\r\n              <DatePicker\r\n                views={['month', 'year']}\r\n                label=\"Month and Year\"\r\n                value={date}\r\n                onChange={(newValue) => handleChange(newValue)}\r\n                renderInput={(params) => <TextField {...params} />}\r\n              />\r\n              {isLoading ? null : (\r\n                <Chip\r\n                  label={details.status}\r\n                  color={details.status === 'SUBMITTED' || details.status === 'APPROVED' ? 'success' : 'primary'}\r\n                />\r\n              )}\r\n            </Stack>\r\n          </Box>\r\n          <CardContent>\r\n            <Scrollbar>\r\n              <TableContainer sx={{ minWidth: 800 }}>\r\n                <Table>\r\n                  <TableHead>\r\n                    <TableRow style={{ whiteSpace: 'nowrap' }}>\r\n                      {TABLE_HEAD.map((headCell) => (\r\n                        <TableCell key={headCell.id} align={headCell.alignRight ? 'right' : 'left'}>\r\n                          {headCell.label}\r\n                        </TableCell>\r\n                      ))}\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {rows.map((row, i) => {\r\n                      const { kpi, description, rating, selfrating, managerRating } = row;\r\n\r\n                      return (\r\n                        <TableRow hover key={i} tabIndex={-1}>\r\n                          <TableCell align=\"left\">{kpi}</TableCell>\r\n                          <TableCell align=\"left\">{description}</TableCell>\r\n                          <TableCell align=\"right\">{rating}</TableCell>\r\n                          <TableCell align=\"right\">\r\n                            {details.status === 'SUBMITTED' || details.status === 'APPROVED' ? (\r\n                              <>{selfrating}</>\r\n                            ) : (\r\n                              <FormControl fullWidth>\r\n                                <Select\r\n                                  displayEmpty\r\n                                  size=\"small\"\r\n                                  value={selfrating}\r\n                                  onChange={(e) => handleSelfRatingChange(row, e)}\r\n                                >\r\n                                  <MenuItem value=\"0\">\r\n                                    <em>None</em>\r\n                                  </MenuItem>\r\n                                  {[...Array.from({ length: +rating }, (_, i) => i + 1)].map((_x, i) => (\r\n                                    <MenuItem key={i} value={_x}>\r\n                                      {_x}\r\n                                    </MenuItem>\r\n                                  ))}\r\n                                </Select>\r\n                              </FormControl>\r\n                            )}\r\n                          </TableCell>\r\n                          <TableCell align=\"right\">{managerRating || '-'}</TableCell>\r\n                        </TableRow>\r\n                      );\r\n                    })}\r\n                  </TableBody>\r\n                  <TableFooter>\r\n                    <TableRow>\r\n                      <TableCell colSpan={1} />\r\n                      <TableCell align=\"center\">Total </TableCell>\r\n                      <TableCell align=\"right\">{sumKpi}</TableCell>\r\n                      <TableCell align=\"right\">{sumKpiUser}</TableCell>\r\n                      <TableCell align=\"right\">{sumKpiManager}</TableCell>\r\n                    </TableRow>\r\n\r\n                    <TableRow>\r\n                      <TableCell colSpan={1} />\r\n                      <TableCell align=\"center\">KPI - (100/10) </TableCell>\r\n                      <TableCell align=\"right\">{sumKpi / 10}</TableCell>\r\n                      <TableCell align=\"right\">{sumKpiUser / 10}</TableCell>\r\n                      <TableCell align=\"right\">{sumKpiManager / 10}</TableCell>\r\n                    </TableRow>\r\n                  </TableFooter>\r\n                </Table>\r\n              </TableContainer>\r\n            </Scrollbar>\r\n          </CardContent>\r\n          <CardActions disableSpacing>\r\n            <Stack\r\n              style={{ width: '100em' }}\r\n              direction=\"row\"\r\n              spacing={2}\r\n              alignItems=\"center\"\r\n              justifyContent=\"flex-end\"\r\n              component={Paper}\r\n            >\r\n              <Button\r\n                size=\"small\"\r\n                variant=\"contained\"\r\n                onClick={() => handleSubmit('save')}\r\n                disabled={details.status === 'SUBMITTED' || details.status === 'APPROVED' || isLoading}\r\n              >\r\n                Save\r\n              </Button>\r\n              <Button\r\n                size=\"small\"\r\n                variant=\"contained\"\r\n                onClick={() => handleSubmit('submit')}\r\n                disabled={details.status === 'SUBMITTED' || details.status === 'APPROVED' || isLoading}\r\n              >\r\n                Submit\r\n              </Button>\r\n            </Stack>\r\n          </CardActions>\r\n        </Card>\r\n      </Container>\r\n    </Page>\r\n  );\r\n}\r\n"],"sourceRoot":""}