{"version":3,"sources":["components/HeaderBreadcrumbs.js","components/CustomLoadingOverlay.js","pages/timesheetsettings/ProjectMasterComponents/ProjectMasterList.js","pages/timesheetsettings/ProjectMaster.js"],"names":["HeaderBreadcrumbs","links","action","heading","moreLink","sx","other","mb","display","alignItems","flexGrow","variant","gutterBottom","flexShrink","mt","isString","href","target","map","noWrap","CustomLoadingOverlay","style","position","top","width","ProjectMasterList","rows","isLoading","useDispatch","useNavigate","React","useState","Page","title","Card","CardContent","height","getRowId","row","id","columns","field","headerName","editable","rowsPerPageOptions","loading","components","LoadingOverlay","disableSelectionOnClick","ProjectMaster","themeStretch","useSettings","dispatch","useSelector","getIsLoadingFromTS","getProjectLOVFromTS","console","log","useEffect","getProjectLOVAsync","Container","maxWidth","name","PATH_DASHBOARD","general","root","timesheet","settings"],"mappings":"wSAiBe,SAASA,EAAT,GAA2F,IAA9DC,EAA6D,EAA7DA,MAAOC,EAAsD,EAAtDA,OAAQC,EAA8C,EAA9CA,QAA8C,IAArCC,gBAAqC,MAApB,GAAoB,EAAhBC,EAAgB,EAAhBA,GAAOC,EAAS,iBACvG,OACE,eAAC,IAAD,CAAKD,GAAE,aAAIE,GAAI,GAAMF,GAArB,UACE,eAAC,IAAD,CAAKA,GAAI,CAAEG,QAAS,OAAQC,WAAY,UAAxC,UACE,eAAC,IAAD,CAAKJ,GAAI,CAAEK,SAAU,GAArB,UACE,cAAC,IAAD,CAAYC,QAAQ,KAAKC,cAAY,EAArC,SACGT,IAEH,cAAC,IAAD,aAAcF,MAAOA,GAAWK,OAGjCJ,GAAU,cAAC,IAAD,CAAKG,GAAI,CAAEQ,WAAY,GAAvB,SAA6BX,OAG1C,cAAC,IAAD,CAAKG,GAAI,CAAES,GAAI,GAAf,SACGC,mBAASX,GACR,cAAC,IAAD,CAAMY,KAAMZ,EAAUa,OAAO,SAASN,QAAQ,QAA9C,SACGP,IAGHA,EAASc,KAAI,SAACF,GAAD,OACX,cAAC,IAAD,CAAMG,QAAM,EAAYH,KAAMA,EAAML,QAAQ,QAAQM,OAAO,SAASZ,GAAI,CAAEG,QAAS,SAAnF,SACGQ,GADeA,a,iCCtC9B,oEAIe,SAASI,IACtB,OACE,cAAC,IAAD,UACE,qBAAKC,MAAO,CAAEC,SAAU,WAAYC,IAAK,EAAGC,MAAO,QAAnD,SACE,cAAC,IAAD,U,4NCUO,SAASC,EAAT,GAAiD,IAApBC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,UAQhD,GAJiBC,cAEAC,cAE2BC,IAAMC,SAAS,KAA3D,6BAsDA,OACE,cAACC,EAAA,EAAD,CAAMC,MA9DM,sBA8DZ,SACE,cAACC,EAAA,EAAD,UAUE,cAACC,EAAA,EAAD,UACE,qBAAKd,MAAO,CAAEe,OAAQ,IAAKZ,MAAO,QAAlC,SACE,qBAAKH,MAAO,CAAEb,QAAS,OAAQ4B,OAAQ,QAAvC,SACE,qBAAKf,MAAO,CAAEX,SAAU,GAAxB,SACE,cAAC,IAAD,CACEgB,KAAMA,EACNW,SAAU,SAACC,GAAD,OAASA,EAAIC,IACvBC,QAvEA,CACd,CACEC,MAAO,KACPC,WAAY,KACZlB,MAAO,IACPmB,UAAU,GAQZ,CACEF,MAAO,cACPC,WAAY,eACZlB,MAAO,IACPmB,UAAU,IAuDEC,mBAAoB,CAAC,EAAG,GAAI,KAC5BC,QAASlB,EACTmB,WAAY,CACVC,eAAgB3B,KAGlB4B,yBAAuB,gBChG1B,SAASC,IACtB,IAAQC,EAAiBC,cAAjBD,aACFjB,EAAQ,iBAERmB,EAAWxB,cAEXD,EAAY0B,YAAYC,KACxB5B,EAAO2B,YAAYE,KAOzB,OANAC,QAAQC,IAAI/B,GAEZI,IAAM4B,WAAU,WACdN,EAASO,iBACR,CAACP,IAGF,cAACpB,EAAA,EAAD,CAAMC,MAAOA,EAAb,SACE,eAAC2B,EAAA,EAAD,CAAWC,UAAUX,GAAuB,KAA5C,UACE,cAAClD,EAAA,EAAD,CACEG,QAAS8B,EACThC,MAAO,CACL,CAAE6D,KAAM,YAAa9C,KAAM+C,IAAeC,QAAQC,MAClD,CAAEH,KAAM,WAAY9C,KAAM+C,IAAeG,UAAUC,UACnD,CAAEL,KAAM,qBAaZ,cAACrC,EAAD,CAAmBC,KAAMA,EAAMC,UAAWA","file":"static/js/37.a4096f1b.chunk.js","sourcesContent":["import { isString } from 'lodash';\nimport PropTypes from 'prop-types';\n// material\nimport { Box, Typography, Link } from '@mui/material';\n//\nimport { MBreadcrumbs } from './@material-extend';\n\n// ----------------------------------------------------------------------\n\nHeaderBreadcrumbs.propTypes = {\n  links: PropTypes.array,\n  action: PropTypes.node,\n  heading: PropTypes.string.isRequired,\n  moreLink: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  sx: PropTypes.object\n};\n\nexport default function HeaderBreadcrumbs({ links, action, heading, moreLink = '' || [], sx, ...other }) {\n  return (\n    <Box sx={{ mb: 5, ...sx }}>\n      <Box sx={{ display: 'flex', alignItems: 'center' }}>\n        <Box sx={{ flexGrow: 1 }}>\n          <Typography variant=\"h4\" gutterBottom>\n            {heading}\n          </Typography>\n          <MBreadcrumbs links={links} {...other} />\n        </Box>\n\n        {action && <Box sx={{ flexShrink: 0 }}>{action}</Box>}\n      </Box>\n\n      <Box sx={{ mt: 2 }}>\n        {isString(moreLink) ? (\n          <Link href={moreLink} target=\"_blank\" variant=\"body2\">\n            {moreLink}\n          </Link>\n        ) : (\n          moreLink.map((href) => (\n            <Link noWrap key={href} href={href} variant=\"body2\" target=\"_blank\" sx={{ display: 'table' }}>\n              {href}\n            </Link>\n          ))\n        )}\n      </Box>\n    </Box>\n  );\n}\n","import React from 'react';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport { GridOverlay } from '@mui/x-data-grid';\n\nexport default function CustomLoadingOverlay() {\n  return (\n    <GridOverlay>\n      <div style={{ position: 'absolute', top: 0, width: '100%' }}>\n        <LinearProgress />\n      </div>\n    </GridOverlay>\n  );\n}\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { DataGrid } from '@mui/x-data-grid';\r\nimport Card from '@mui/material/Card';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport Page from '../../../components/Page';\r\n// import { PATH_DASHBOARD } from '../../../routes/paths';\r\n// import { deleteKpiKraActionAsync, multipleKpiKraDeleteActionAsync } from '../../../redux/slices/timesheetSettingsSlice';\r\nimport CustomLoadingOverlay from '../../../components/CustomLoadingOverlay';\r\n\r\nProjectMasterList.propTypes = {\r\n  rows: PropTypes.array,\r\n  isLoading: PropTypes.bool\r\n};\r\n\r\nexport default function ProjectMasterList({ rows, isLoading }) {\r\n  const title = 'Project Master List';\r\n\r\n  // eslint-disable-next-line no-unused-vars\r\n  const dispatch = useDispatch();\r\n  // eslint-disable-next-line no-unused-vars\r\n  const navigate = useNavigate();\r\n  // eslint-disable-next-line no-unused-vars\r\n  const [selectionModel, setSelectionModel] = React.useState([]);\r\n\r\n  const columns = [\r\n    {\r\n      field: 'id',\r\n      headerName: 'Id',\r\n      width: 200,\r\n      editable: false\r\n    },\r\n    // {\r\n    //   field: 'projectName',\r\n    //   headerName: 'Segment',\r\n    //   width: 300,\r\n    //   editable: false\r\n    // },\r\n    {\r\n      field: 'projectName',\r\n      headerName: 'Project Name',\r\n      width: 200,\r\n      editable: false\r\n    }\r\n    // {\r\n    //   field: '',\r\n    //   headerName: 'Actions',\r\n    //   width: 300,\r\n    //   editable: false,\r\n    //   renderCell: (params) => (\r\n    //     <>\r\n    //       <IconButton color=\"primary\" aria-label=\"edit group\" onClick={() => handleEdit(params.row)}>\r\n    //         <EditIcon />\r\n    //       </IconButton>\r\n    //       <IconButton color=\"primary\" aria-label=\"delete group\" onClick={() => handleOnGroupDelete(params.row)}>\r\n    //         <DeleteIcon />\r\n    //       </IconButton>\r\n    //     </>\r\n    //   )\r\n    // }\r\n  ];\r\n\r\n  // const handleEdit = (values) => {\r\n  //   navigate(`${PATH_DASHBOARD.timesheet.projectMasterEdit}/${values.id}`);\r\n  // };\r\n\r\n  // const handleOnGroupDelete = (values) => {\r\n  //   dispatch(deleteKpiKraActionAsync(values.id));\r\n  // };\r\n\r\n  // const handleMultipleDelete = () => {\r\n  //   const payload = {\r\n  //     ids: selectionModel\r\n  //   };\r\n  //   dispatch(multipleKpiKraDeleteActionAsync(payload));\r\n  // };\r\n\r\n  return (\r\n    <Page title={title}>\r\n      <Card>\r\n        {/* {selectionModel.length > 0 && (\r\n          <CardHeader\r\n            action={\r\n              <IconButton onClick={handleMultipleDelete} color=\"primary\">\r\n                <Icon icon={trash2Fill} />\r\n              </IconButton>\r\n            }\r\n          />\r\n        )} */}\r\n        <CardContent>\r\n          <div style={{ height: 350, width: '100%' }}>\r\n            <div style={{ display: 'flex', height: '100%' }}>\r\n              <div style={{ flexGrow: 1 }}>\r\n                <DataGrid\r\n                  rows={rows}\r\n                  getRowId={(row) => row.id}\r\n                  columns={columns}\r\n                  rowsPerPageOptions={[5, 25, 100]}\r\n                  loading={isLoading}\r\n                  components={{\r\n                    LoadingOverlay: CustomLoadingOverlay\r\n                  }}\r\n                  //   checkboxSelection\r\n                  disableSelectionOnClick\r\n                  //   onSelectionModelChange={(newSelectionModel) => {\r\n                  //     setSelectionModel(newSelectionModel);\r\n                  //   }}\r\n                  //   selectionModel={selectionModel}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </Page>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Container } from '@mui/material';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { PATH_DASHBOARD } from '../../routes/paths';\r\nimport HeaderBreadcrumbs from '../../components/HeaderBreadcrumbs';\r\nimport useSettings from '../../hooks/useSettings';\r\nimport Page from '../../components/Page';\r\nimport { getIsLoadingFromTS, getProjectLOVAsync, getProjectLOVFromTS } from '../../redux/slices/timesheetSlice';\r\nimport ProjectMasterList from './ProjectMasterComponents/ProjectMasterList';\r\n\r\nexport default function ProjectMaster() {\r\n  const { themeStretch } = useSettings();\r\n  const title = 'Project Master';\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const isLoading = useSelector(getIsLoadingFromTS);\r\n  const rows = useSelector(getProjectLOVFromTS);\r\n  console.log(rows);\r\n\r\n  React.useEffect(() => {\r\n    dispatch(getProjectLOVAsync());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <Page title={title}>\r\n      <Container maxWidth={themeStretch ? false : 'lg'}>\r\n        <HeaderBreadcrumbs\r\n          heading={title}\r\n          links={[\r\n            { name: 'Dashboard', href: PATH_DASHBOARD.general.root },\r\n            { name: 'Settings', href: PATH_DASHBOARD.timesheet.settings },\r\n            { name: 'Project Master' }\r\n          ]}\r\n          //   action={\r\n          //     <Button\r\n          //       variant=\"contained\"\r\n          //       component={RouterLink}\r\n          //       to={PATH_DASHBOARD.timesheet.projectMasterCreate}\r\n          //       startIcon={<Icon icon={plusFill} />}\r\n          //     >\r\n          //       Configure\r\n          //     </Button>\r\n          //   }\r\n        />\r\n        <ProjectMasterList rows={rows} isLoading={isLoading} />\r\n      </Container>\r\n    </Page>\r\n  );\r\n}\r\n"],"sourceRoot":""}